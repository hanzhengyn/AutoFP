//#include "AdvMotDrv.h"
//#ifndef _KMDF
//#include <winioctl.h>
//#endif

//!!!!!!!!!!!!!!!!!!!!!!!! Note !!!!!!!!!!!!!!!!!!!!!!!!!!!
//! DevNumber must be 1st paramter of IOCTL_xxx structure !
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#ifndef __IO_CONTROL_H__
#define __IO_CONTROL_H__

#define ACM_TYPE						40001
// #define MAX_GP_NUM_PER_DEV			1
// #define MAX_GP_NUM_PER_AP			32
// #define PATH_MAX_CNT					600
// #define PATH_SYS_BUF_DEPTH			6000

#ifdef  PCI1240
#define Axis_NUM                			0x04
#define MAX_AXIS_NUM_PER_DEV    			4
#define MAX_AXIS_NUM_PER_GP    				3
#define MAX_INTERPOLATION_AXES_NUM 		    3

//[Dan.Yang 2011.07.13]
#define MAX_GP_NUM_PER_DEV			1
#define MAX_GP_NUM_PER_AP			32
#define PATH_MAX_CNT					600
#define PATH_SYS_BUF_DEPTH			6000
#endif

#ifdef PCI1220
#define Axis_NUM                0x32
#define MAX_AXIS_NUM_PER_DEV    2
#define MAX_AXIS_NUM_PER_GP    32
#define MAX_INTERPOLATION_AXES_NUM 32

//[Dan.Yang 2011.07.13]
#define MAX_GP_NUM_PER_DEV			1
#define MAX_GP_NUM_PER_AP			32
#define PATH_MAX_CNT					600
#define PATH_SYS_BUF_DEPTH			6000
#endif

#ifdef PCI1244
#define Axis_NUM                0x4
#define MAX_AXIS_NUM_PER_DEV    4
#define MAX_AXIS_NUM_PER_GP     4
#define MAX_INTERPOLATION_AXES_NUM 4

//[Dan.Yang 2011.07.13]
#define MAX_GP_NUM_PER_DEV			1
#define MAX_GP_NUM_PER_AP			32
#define PATH_MAX_CNT					600
#define PATH_SYS_BUF_DEPTH			6000
#endif

#ifdef PCI1202
#define Axis_NUM                0x4
#define MAX_AXIS_NUM_PER_DEV    4
#define MAX_AXIS_NUM_PER_GP    4
#define MAX_INTERPOLATION_AXES_NUM 4

//[Dan.Yang 2011.07.13]
#define MAX_GP_NUM_PER_DEV			1
#define MAX_GP_NUM_PER_AP			32
#define PATH_MAX_CNT					600
#define PATH_SYS_BUF_DEPTH			6000
#endif

#ifdef PCM3202P
#define Axis_NUM                0x4
#define MAX_AXIS_NUM_PER_DEV    4
#define MAX_AXIS_NUM_PER_GP    4
#define MAX_INTERPOLATION_AXES_NUM 4

//[Dan.Yang 2011.07.13]
#define MAX_GP_NUM_PER_DEV			1
#define MAX_GP_NUM_PER_AP			32
#define PATH_MAX_CNT					600
#define PATH_SYS_BUF_DEPTH			6000
#endif

#ifdef APAX5202
#define Axis_NUM                0x4
#define MAX_AXIS_NUM_PER_DEV    4
#define MAX_AXIS_NUM_PER_GP    4
#define MAX_INTERPOLATION_AXES_NUM 4

//[Dan.Yang 2011.07.13]
#define MAX_GP_NUM_PER_DEV			1
#define MAX_GP_NUM_PER_AP			32
#define PATH_MAX_CNT					600
#define PATH_SYS_BUF_DEPTH			6000
#endif

//ydd add for pci1265 and pci1245 2011-03-02
#ifdef PCI1265
#define Axis_NUM                    0x06
#define MAX_AXIS_NUM_PER_DEV        6
#define MAX_AXIS_NUM_PER_GP         6
#define MAX_INTERPOLATION_AXES_NUM  6
#define MAX_GP_NUM_PER_DEV			3
#define MAX_GP_NUM_PER_AP			3
#define AXIS_NUM_3DARC              3
#define PATH_MAX_CNT				600
#define PATH_SYS_BUF_DEPTH			10000
#define CMPDATA_MAX_CNT             100000
#define MAX_PWMTABLE_CNT            30000
#define MAX_DAQ_DI_CNT              8
#define MAX_DAQ_DO_CNT              8
#define MAX_DAQ_AI_CNT              2
#endif
//ydd add for pci1265 and pci1245 2011-03-02
#ifdef PCI1245
#define Axis_NUM                    0x04
#define MAX_AXIS_NUM_PER_DEV        4
#define MAX_AXIS_NUM_PER_GP         4
#define MAX_INTERPOLATION_AXES_NUM  4
#define MAX_GP_NUM_PER_DEV			2
#define MAX_GP_NUM_PER_AP			2
#define PATH_MAX_CNT				600
#define PATH_SYS_BUF_DEPTH			10000
#define CMPDATA_MAX_CNT             100000
#define MAX_PWMTABLE_CNT            30000
#endif

//  [11/12/2012 dan.yang]
#ifdef PCI1285	
#define Axis_NUM                    0x08
#define MAX_AXIS_NUM_PER_DEV        8
#define MAX_AXIS_NUM_PER_GP         8
#define MAX_INTERPOLATION_AXES_NUM  8
#define MAX_GP_NUM_PER_DEV			4
#define MAX_GP_NUM_PER_AP			4
#define AXIS_NUM_3DARC              3
#define PATH_MAX_CNT				600
#define PATH_SYS_BUF_DEPTH			7000
#define CMPDATA_MAX_CNT             100000
#define MAX_PWMTABLE_CNT            30000
#endif

#ifdef ADVVIRTUALMOTIONCARD	
#define Axis_NUM                    0x08
#define MAX_AXIS_NUM_PER_DEV        8
#define MAX_AXIS_NUM_PER_GP         8
#define MAX_INTERPOLATION_AXES_NUM  8
#define MAX_GP_NUM_PER_DEV			4
#define MAX_GP_NUM_PER_AP			4
#define PATH_MAX_CNT				600
#define PATH_SYS_BUF_DEPTH			10000
#define CMPDATA_MAX_CNT             100000

#endif

#ifdef PCI1245L
#define Axis_NUM                      0x04
#define MAX_AXIS_NUM_PER_DEV          4
#define MAX_AXIS_NUM_PER_GP           2
#define MAX_INTERPOLATION_AXES_NUM    4
#define MAX_GP_NUM_PER_DEV			1
#define MAX_GP_NUM_PER_AP			1
#define PATH_MAX_CNT				600
#define PATH_SYS_BUF_DEPTH			10000
#define CMPDATA_MAX_CNT             100000
#endif

#ifdef PCI1245S
#define Axis_NUM                    0x04
#define MAX_AXIS_NUM_PER_DEV        4
#define MAX_AXIS_NUM_PER_GP         4
#define MAX_INTERPOLATION_AXES_NUM  4
#define MAX_GP_NUM_PER_DEV			1
#define MAX_GP_NUM_PER_AP			1
#define PATH_MAX_CNT				600
#define PATH_SYS_BUF_DEPTH			10000
#define CMPDATA_MAX_CNT             100000
#endif

#ifdef MIC3285
#define Axis_NUM                    0x08
#define MAX_AXIS_NUM_PER_DEV        8
#define MAX_AXIS_NUM_PER_GP         8
#define MAX_INTERPOLATION_AXES_NUM  8
#define MAX_GP_NUM_PER_DEV			4
#define MAX_GP_NUM_PER_AP			4
#define AXIS_NUM_3DARC              3
#define PATH_MAX_CNT				600
#define PATH_SYS_BUF_DEPTH			7000
#define CMPDATA_MAX_CNT             100000
#define MAX_PWMTABLE_CNT            30000
#define MAX_DAQ_DI_CNT              8
#define MAX_DAQ_DO_CNT              8
#define MAX_DAQ_AI_CNT              2
#endif

#ifdef MIC3245
#define Axis_NUM                    0x04
#define MAX_AXIS_NUM_PER_DEV        4
#define MAX_AXIS_NUM_PER_GP         4
#define MAX_INTERPOLATION_AXES_NUM  4
#define MAX_GP_NUM_PER_DEV			2
#define MAX_GP_NUM_PER_AP			2
#define PATH_MAX_CNT				600
#define PATH_SYS_BUF_DEPTH			10000
#define CMPDATA_MAX_CNT             100000
#define MAX_PWMTABLE_CNT            30000
#define MAX_DAQ_DI_CNT              8
#define MAX_DAQ_DO_CNT              8
#define MAX_DAQ_AI_CNT              2
#endif

//  [11/12/2012 dan.yang]
#ifdef PCI1203	
#define Axis_NUM                    24
#define MAX_AXIS_NUM_PER_DEV        24
#define MAX_AXIS_NUM_PER_GP         6
#define MAX_INTERPOLATION_AXES_NUM  6
#define MAX_GP_NUM_PER_DEV			6
#define MAX_GP_NUM_PER_AP			6
#define AXIS_NUM_3DARC              3
#define PATH_MAX_CNT				600
#define PATH_SYS_BUF_DEPTH			7000
#define CMPDATA_MAX_CNT             100000
#define MAX_PWMTABLE_CNT            30000
#define MAX_DAQ_DI_CNT              1024
#define MAX_DAQ_DO_CNT              1024
#define MAX_DAQ_AI_CNT              128
#define MAX_DAQ_AO_CNT              128
#endif

#define CAMPOINT_MAX_CNT            128
#define AXIS_NUM_3DARC              3

//
// If a variable or field of structure whose type is pointer(handle)
// is needed to compatible with 32bit and 64bit os, it should be declared
// like this:
// Compatible(<type>, <name>)
#ifndef DECL_64Compat
#define DECL_64Compat(type, name)\
union { type name; __int64 _pad##name; }
#endif

//////////////////////////////////////////////////////////////////////////
#define IOCTL_RING	   0xa00		// Master Device IOCTL 
#define IOCTL_ROBOT    0xb00        //  [10/8/2012 dan.yang]

#define IOCTL_ACM_DEV_OPEN \
    CTL_CODE(ACM_TYPE, 0x900, METHOD_BUFFERED, FILE_ANY_ACCESS)
    
#define IOCTL_ACM_DEV_CLOSE \
    CTL_CODE(ACM_TYPE, 0x901, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_OPEN \
    CTL_CODE(ACM_TYPE, 0x902, METHOD_BUFFERED, FILE_ANY_ACCESS)
    
#define IOCTL_ACM_AX_CLOSE \
    CTL_CODE(ACM_TYPE, 0x903, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_SET_PROPERTY \
    CTL_CODE(ACM_TYPE, 0x904, METHOD_BUFFERED, FILE_ANY_ACCESS) 
    
#define IOCTL_ACM_AX_GET_PROPERTY \
    CTL_CODE(ACM_TYPE, 0x905, METHOD_BUFFERED, FILE_ANY_ACCESS)     

#define IOCTL_ACM_AX_SET_SERVO_ON \
    CTL_CODE(ACM_TYPE, 0x906, METHOD_BUFFERED, FILE_ANY_ACCESS)   
    
#define IOCTL_ACM_AX_GET_STATE \
    CTL_CODE(ACM_TYPE, 0x907, METHOD_BUFFERED, FILE_ANY_ACCESS)  
    
#define IOCTL_ACM_AX_GET_CMD_POSITION \
    CTL_CODE(ACM_TYPE, 0x908, METHOD_BUFFERED, FILE_ANY_ACCESS)
    
#define IOCTL_ACM_AX_SET_CMD_POSITION \
    CTL_CODE(ACM_TYPE, 0x909, METHOD_BUFFERED, FILE_ANY_ACCESS)
  
#define IOCTL_ACM_AX_GET_REAL_POSITION \
    CTL_CODE(ACM_TYPE, 0x90a, METHOD_BUFFERED, FILE_ANY_ACCESS)
    
#define IOCTL_ACM_AX_SET_REAL_POSITION \
    CTL_CODE(ACM_TYPE, 0x90b, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_GET_CMD_VELOCITY \
    CTL_CODE(ACM_TYPE, 0x90c, METHOD_BUFFERED, FILE_ANY_ACCESS)
    
#define IOCTL_ACM_AX_GET_MOTION_IO \
    CTL_CODE(ACM_TYPE, 0x90d, METHOD_BUFFERED, FILE_ANY_ACCESS)
    
#define IOCTL_ACM_AX_GET_MOTION_STATUS \
    CTL_CODE(ACM_TYPE, 0x90e, METHOD_BUFFERED, FILE_ANY_ACCESS)
    
#define IOCTL_ACM_GET_LAST_ERROR \
    CTL_CODE(ACM_TYPE, 0x90f, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_MOVE_REL \
    CTL_CODE(ACM_TYPE, 0x910, METHOD_BUFFERED, FILE_ANY_ACCESS)
    
#define IOCTL_ACM_AX_MOVE_VEL \
    CTL_CODE(ACM_TYPE, 0x911, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_STOP_DEC \
    CTL_CODE(ACM_TYPE, 0x912, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_STOP_EMG \
    CTL_CODE(ACM_TYPE, 0x913, METHOD_BUFFERED, FILE_ANY_ACCESS)
    
#define IOCTL_ACM_AX_HOME_EX \
    CTL_CODE(ACM_TYPE, 0x914, METHOD_BUFFERED, FILE_ANY_ACCESS)    

#define IOCTL_ACM_AX_RESET_ERR \
    CTL_CODE(ACM_TYPE, 0x915, METHOD_BUFFERED, FILE_ANY_ACCESS)
    
#define IOCTL_ACM_GP_ADD_AXIS \
    CTL_CODE(ACM_TYPE, 0x916, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_REM_AXIS \
    CTL_CODE(ACM_TYPE, 0x917, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_CLOSE \
    CTL_CODE(ACM_TYPE, 0x918, METHOD_BUFFERED, FILE_ANY_ACCESS)    
    
#define IOCTL_ACM_GP_LINE_REL \
    CTL_CODE(ACM_TYPE, 0x919, METHOD_BUFFERED, FILE_ANY_ACCESS) 
    
#define IOCTL_ACM_GP_ARC_REL \
    CTL_CODE(ACM_TYPE, 0x91a, METHOD_BUFFERED, FILE_ANY_ACCESS) 
    
#define IOCTL_ACM_GP_DIRECT_REL \
    CTL_CODE(ACM_TYPE, 0x91b, METHOD_BUFFERED, FILE_ANY_ACCESS) 
    
#define IOCTL_ACM_GP_GET_STATE \
    CTL_CODE(ACM_TYPE, 0x91c, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_CONTI_IPO \
    CTL_CODE(ACM_TYPE, 0x91d, METHOD_BUFFERED, FILE_ANY_ACCESS)
    
#define IOCTL_ACM_GP_STOP_DEC \
    CTL_CODE(ACM_TYPE, 0x91e, METHOD_BUFFERED, FILE_ANY_ACCESS)
    
#define IOCTL_ACM_GP_STOP_EMG \
    CTL_CODE(ACM_TYPE, 0x91f, METHOD_BUFFERED, FILE_ANY_ACCESS)
    
#define IOCTL_ACM_GET_EVT_STATUS \
    CTL_CODE(ACM_TYPE, 0x920, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_RESET_ERR \
    CTL_CODE(ACM_TYPE, 0x921, METHOD_BUFFERED, FILE_ANY_ACCESS)
//*************************************************************
#define IOCTL_ACM_DEV_GET_EVTINFO \
    CTL_CODE(ACM_TYPE, 0x922, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_ENABLE_EVT \
    CTL_CODE(ACM_TYPE, 0x923, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_SET_CMP_TAB \
    CTL_CODE(ACM_TYPE, 0x924, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_GET_CMP_DATA \
    CTL_CODE(ACM_TYPE, 0x925, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_LINE_ABS \
    CTL_CODE(ACM_TYPE, 0x926, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_ARC_ABS \
    CTL_CODE(ACM_TYPE, 0x927, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_CHANGE_VEL \
    CTL_CODE(ACM_TYPE, 0x928, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_MOVE_ABS \
    CTL_CODE(ACM_TYPE, 0x929, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_GET_PROPERTY \
    CTL_CODE(ACM_TYPE, 0x930, METHOD_BUFFERED, FILE_ANY_ACCESS) 

#define IOCTL_ACM_GP_SET_PROPERTY \
    CTL_CODE(ACM_TYPE, 0x931, METHOD_BUFFERED, FILE_ANY_ACCESS) 

#define IOCTL_ACM_GP_GET_PROPERTY \
    CTL_CODE(ACM_TYPE, 0x932, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_DIRECT_ABS \
    CTL_CODE(ACM_TYPE, 0x933, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_CANCEL_EVT \
    CTL_CODE(ACM_TYPE, 0x934, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_SYSBUF_CONTI_IPO \
    CTL_CODE(ACM_TYPE, 0x935, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_ADD_PATH \
    CTL_CODE(ACM_TYPE, 0x936, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_RST_PATH \
    CTL_CODE(ACM_TYPE, 0x937, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_GET_PATH_STATUS \
    CTL_CODE(ACM_TYPE, 0x938, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_CHANGE_POS \
    CTL_CODE(ACM_TYPE, 0x939, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_CHANGE_VEL \
    CTL_CODE(ACM_TYPE, 0x93A, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_GET_PPU_RATE \
    CTL_CODE(ACM_TYPE, 0x93B, METHOD_BUFFERED, FILE_ANY_ACCESS) 

#define IOCTL_ACM_GP_GET_CUR_POS \
    CTL_CODE(ACM_TYPE, 0x93C, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_SET_EXT_DRIVE \
    CTL_CODE(ACM_TYPE, 0x93D, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_DO_SET_BIT \
    CTL_CODE(ACM_TYPE, 0x93E, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_DO_GET_BIT \
    CTL_CODE(ACM_TYPE, 0x93F, METHOD_BUFFERED, FILE_ANY_ACCESS) 

#define IOCTL_ACM_AX_DI_GET_BIT \
    CTL_CODE(ACM_TYPE, 0x940, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_GET_RATE \
    CTL_CODE(ACM_TYPE, 0x941, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_BELONGSTO \
	CTL_CODE(ACM_TYPE, 0x942, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_GET_MASTER_DEV \
	CTL_CODE(ACM_TYPE, 0x943, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_GET_SLAVE_DEVS \
	CTL_CODE(ACM_TYPE, 0x944, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_READ_EEPROM \
	CTL_CODE(ACM_TYPE, 0x945, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_WRITE_EEPROM \
	CTL_CODE(ACM_TYPE, 0x946, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_SIMULATE_START_SUSPEND \
    CTL_CODE(ACM_TYPE, 0x947, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_SIMULATE_START \
    CTL_CODE(ACM_TYPE, 0x948, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_SIMULATE_STOP \
    CTL_CODE(ACM_TYPE, 0x949, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_SIMULATE_START_SUSPEND_ABS \
	CTL_CODE(ACM_TYPE, 0x94a, METHOD_BUFFERED, FILE_ANY_ACCESS)

// DIO Device Modified [dan.yang 2011.05.13]
#define IOCTL_ACM_DEV_GET_DIO_BYTE \
	CTL_CODE(ACM_TYPE, 0x94b, METHOD_BUFFERED, FILE_ANY_ACCESS)      

#define IOCTL_ACM_DEV_SET_DIO_BYTE \
	CTL_CODE(ACM_TYPE, 0x94c, METHOD_BUFFERED, FILE_ANY_ACCESS)      

#define IOCTL_ACM_DEV_GET_DIO_BIT \
	CTL_CODE(ACM_TYPE, 0x94d, METHOD_BUFFERED, FILE_ANY_ACCESS)      

#define IOCTL_ACM_DEV_SET_DIO_BIT \
	CTL_CODE(ACM_TYPE, 0x950, METHOD_BUFFERED, FILE_ANY_ACCESS)  

// Motion Axis
#define IOCTL_ACM_AX_RESET_ALM \
	CTL_CODE(ACM_TYPE, 0x951, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_SET_ERC_ON \
	CTL_CODE(ACM_TYPE, 0x952, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_GET_LAG_COUNTER \
    CTL_CODE(ACM_TYPE, 0x953, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_GET_LATCH_DATA \
    CTL_CODE(ACM_TYPE, 0x954, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_TRIG_LATCH \
    CTL_CODE(ACM_TYPE, 0x955, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_GET_CMP_STATUS\
    CTL_CODE(ACM_TYPE, 0x956, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_SET_CMP_TABLE \
    CTL_CODE(ACM_TYPE, 0x957, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_SET_CMP_POSITION \
    CTL_CODE(ACM_TYPE, 0x958, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_GET_CMP_POSITION \
    CTL_CODE(ACM_TYPE, 0x959, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_SET_CMPTAB_TIME \
    CTL_CODE(ACM_TYPE, 0x95a, METHOD_BUFFERED, FILE_ANY_ACCESS)//zhaocui add 20130716

#define IOCTL_ACM_AX_SET_CMP_AUTO \
    CTL_CODE(ACM_TYPE, 0x960, METHOD_BUFFERED, FILE_ANY_ACCESS)

//  Motion Group
#define IOCTL_ACM_GP_CONTI_RESET_PATH \
    CTL_CODE(ACM_TYPE, 0x961, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_CONTI_PATH_STATUS \
    CTL_CODE(ACM_TYPE, 0x962, METHOD_BUFFERED, FILE_ANY_ACCESS)

// Other
#define IOCTL_ACM_DEV_FW_DOWNLOAD \
	CTL_CODE(ACM_TYPE, 0x963, METHOD_BUFFERED, FILE_ANY_ACCESS)  

#define IOCTL_ACM_DEV_SET_PROPERTY \
	CTL_CODE(ACM_TYPE, 0x964, METHOD_BUFFERED, FILE_ANY_ACCESS) 


/************************************************************************/
/*         [4/13/2011 dan.yang] Add for pci1265 and pci1245                                                             */
/************************************************************************/

#define IOCTL_ACM_DEV_GET_FEATURE \
	CTL_CODE(ACM_TYPE, 0x965, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_INI_CONFIG \
	CTL_CODE(ACM_TYPE, 0x966, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_MOV_SUPER \
	CTL_CODE(ACM_TYPE, 0x967, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_GET_AXCMDPOS \
	CTL_CODE(ACM_TYPE, 0x968, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_SIMULATE_START_SUSPEND_VEL \
	CTL_CODE(ACM_TYPE, 0x969, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_LATCH_RESET \
	CTL_CODE(ACM_TYPE, 0x96a, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_LATCH_FLAG \
	CTL_CODE(ACM_TYPE, 0x96b, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_HOME \
    CTL_CODE(ACM_TYPE, 0x96c, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_MOVE_PATH \
    CTL_CODE(ACM_TYPE, 0x96d, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_LATCH_TRIGGER \
	CTL_CODE(ACM_TYPE, 0x96e, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_GET_DI_BYTE \
	CTL_CODE(ACM_TYPE, 0x96f, METHOD_BUFFERED, FILE_ANY_ACCESS) 

#define IOCTL_ACM_DEV_GET_DI_BIT \
	CTL_CODE(ACM_TYPE, 0x970, METHOD_BUFFERED, FILE_ANY_ACCESS) 
     
#define IOCTL_ACM_GP_GET_CMDVEL \
    CTL_CODE(ACM_TYPE, 0x971, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_HELIX_ABS \
    CTL_CODE(ACM_TYPE, 0x972, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_HELIX_REL \
    CTL_CODE(ACM_TYPE, 0x973, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_MOVE_SEL_PATH \
    CTL_CODE(ACM_TYPE, 0x974, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_GET_INDEX_PATH_STATUS \
    CTL_CODE(ACM_TYPE, 0x975, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_DOWNLOAD_CAM_INFO \
    CTL_CODE(ACM_TYPE, 0x976, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_CONFIG_CAM_TABLE \
    CTL_CODE(ACM_TYPE, 0x977, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_MOVE_CAM \
    CTL_CODE(ACM_TYPE, 0x978, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_MOVE_GEAR \
    CTL_CODE(ACM_TYPE, 0x979, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_MOVE_GANTRY \
    CTL_CODE(ACM_TYPE, 0x97a, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_MOVE_TANGENT_GP \
    CTL_CODE(ACM_TYPE, 0x97b, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_DOWNLOAD_DSPFIRMWARE \
    CTL_CODE(ACM_TYPE, 0x97c, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GET_DOWNLOAD_DSPFIRMWARE_RATE \
    CTL_CODE(ACM_TYPE, 0x97d, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_DOWNLOAD_DSPFIRMWARE_STP1 \
    CTL_CODE(ACM_TYPE, 0x97e, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_DOWNLOAD_DSPFIRMWARE_STP2 \
    CTL_CODE(ACM_TYPE, 0x97f, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_DOWNLOAD_DSPFIRMWARE_STP3 \
    CTL_CODE(ACM_TYPE, 0x980, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_SET_HOMECRS_SPD \
    CTL_CODE(ACM_TYPE, 0x981, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_GET_AI_RAWDATA \
    CTL_CODE(ACM_TYPE, 0x982, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_GET_AI_VOLTDATA \
    CTL_CODE(ACM_TYPE, 0x983, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_GET_AI_CURRDATA \
    CTL_CODE(ACM_TYPE, 0x984, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_DOWNLOAD_CAMDATA \
    CTL_CODE(ACM_TYPE, 0x985, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_DOWNLOAD_CPLD_ST1 \
    CTL_CODE(ACM_TYPE, 0x986, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_DOWNLOAD_CPLD_ST2 \
    CTL_CODE(ACM_TYPE, 0x987, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_CHECK_CPLD_BUSY \
    CTL_CODE(ACM_TYPE, 0x989, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_CHECK_CPLD_VERSION \
    CTL_CODE(ACM_TYPE, 0x98a, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_CONFIG_MDAQ \
    CTL_CODE(ACM_TYPE, 0x98b, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_START_MDAQ \
    CTL_CODE(ACM_TYPE, 0x98c, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_STOP_MDAQ \
    CTL_CODE(ACM_TYPE, 0x98d, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_RESET_MDAQ \
    CTL_CODE(ACM_TYPE, 0x98e, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_GET_MDAQ_DATA \
    CTL_CODE(ACM_TYPE, 0x98f, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_GET_MDAQ_STATUS \
    CTL_CODE(ACM_TYPE, 0x990, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_GET_CONFIG_MDAQ \
	CTL_CODE(ACM_TYPE, 0x991, METHOD_BUFFERED, FILE_ANY_ACCESS)

//  [9/29/2012 dan.yang]
#define IOCTL_ACM_DEV_WR_MAILBOX \
	CTL_CODE(ACM_TYPE, 0x992, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_RD_MAILBOX \
	CTL_CODE(ACM_TYPE, 0x993, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_PAUSE_MOTION\
	CTL_CODE(ACM_TYPE, 0x994, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_RESUME_MOTION\
	CTL_CODE(ACM_TYPE, 0x995, METHOD_BUFFERED, FILE_ANY_ACCESS)

//  [12/10/2012 dan.yang]
#define IOCTL_ACM_AX_ADVLAG_PHASE\
	CTL_CODE(ACM_TYPE, 0x996, METHOD_BUFFERED, FILE_ANY_ACCESS)

//  [12/14/2012 dan.yang]
#define IOCTL_ACM_AX_CHANGE_VEL_EX\
	CTL_CODE(ACM_TYPE, 0x997, METHOD_BUFFERED, FILE_ANY_ACCESS)

//  [12/15/2012 dan.yang]
#define IOCTL_ACM_AX_STOP_DEC_EX \
	CTL_CODE(ACM_TYPE, 0x998, METHOD_BUFFERED, FILE_ANY_ACCESS)

//  [3/25/2013 dan.yang]
#define IOCTL_ACM_AX_BCKLSH_CORRECT\
	CTL_CODE(ACM_TYPE, 0x999, METHOD_BUFFERED, FILE_ANY_ACCESS)
	
//  [12/03/2013 zhaocui]
#define IOCTL_ACM_AX_MOVE_CORRECT\
	CTL_CODE(ACM_TYPE, 0x99a, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_ARC3D_ABS \
    CTL_CODE(ACM_TYPE, 0x99b, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_ARC3D_REL \
    CTL_CODE(ACM_TYPE, 0x99c, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_ARC3D_V_ABS \
    CTL_CODE(ACM_TYPE, 0x99d, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_GP_ARC3D_V_REL \
    CTL_CODE(ACM_TYPE, 0x99e, METHOD_BUFFERED, FILE_ANY_ACCESS)

//  [12/25/2013 zhaocui]
#define IOCTL_ACM_AX_SET_PWM_OUT\
	CTL_CODE(ACM_TYPE, 0x99f, METHOD_BUFFERED, FILE_ANY_ACCESS)

//  [12/25/2013 zhaocui]
#define IOCTL_ACM_AX_Get_PWM_OUT_STATE\
    CTL_CODE(ACM_TYPE, 0x9a0, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_AX_JOG \
    CTL_CODE(ACM_TYPE, 0x9a1, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_RB_SET_EXT_DRIVE \
    CTL_CODE(ACM_TYPE, 0x9a2, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_RB_JOG \
    CTL_CODE(ACM_TYPE, 0x9a3, METHOD_BUFFERED, FILE_ANY_ACCESS)
	
//  [8/13/2014 kai.yang]
#define IOCTL_ACM_AX_CHANGE_CMP_INDEX \
	CTL_CODE(ACM_TYPE, 0x9a4, METHOD_BUFFERED, FILE_ANY_ACCESS)


//  [12/10/2014 dan]
#define IOCTL_ACM_WRITE_RINGBUFFER \
	CTL_CODE(ACM_TYPE, 0x9b0, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_READ_RINGBUFFER \
	CTL_CODE(ACM_TYPE, 0x9b1, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_SET_DO_BYTES\
	CTL_CODE(ACM_TYPE, 0x9b2, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_SET_AO_CHANNEL\
	CTL_CODE(ACM_TYPE, 0x9b3, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_GET_AO_CHANNEL\
	CTL_CODE(ACM_TYPE, 0x9b4, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_DEV_DOWNLOAD_DSPFIRMWARE_STP3_CHECK \
    CTL_CODE(ACM_TYPE, 0x9b5, METHOD_BUFFERED, FILE_ANY_ACCESS)
/************************************************************************/
 
//////////////////////////////////////////////////////////////////////////
// Master Device IOCTL 
//////////////////////////////////////////////////////////////////////////
#define IOCTL_ACM_MAS_OPEN \
	CTL_CODE(ACM_TYPE, IOCTL_RING+1, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_MAS_CLOSE \
	CTL_CODE(ACM_TYPE, IOCTL_RING+2, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_MAS_RESET_RING \
    CTL_CODE(ACM_TYPE, IOCTL_RING+3, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_MAS_START_RING \
    CTL_CODE(ACM_TYPE, IOCTL_RING+4, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_MAS_STOP_RING \
    CTL_CODE(ACM_TYPE, IOCTL_RING+5, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_MAS_GET_SLAVE_INFO \
    CTL_CODE(ACM_TYPE, IOCTL_RING+6, METHOD_BUFFERED, FILE_ANY_ACCESS)   

#define IOCTL_ACM_MAS_SET_PROPERTY \
    CTL_CODE(ACM_TYPE, IOCTL_RING+7, METHOD_BUFFERED, FILE_ANY_ACCESS)   

#define IOCTL_ACM_MAS_GET_PROPERTY \
    CTL_CODE(ACM_TYPE, IOCTL_RING+8, METHOD_BUFFERED, FILE_ANY_ACCESS)   

#define IOCTL_ACM_MAS_TRIG_OUT \
    CTL_CODE(ACM_TYPE, IOCTL_RING+9, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_MAS_GET_ERROR_TABLE \
    CTL_CODE(ACM_TYPE, IOCTL_RING+10, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_MAS_GET_COM_STATUS \
    CTL_CODE(ACM_TYPE, IOCTL_RING+11, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_MAS_GET_RING_STATUS \
    CTL_CODE(ACM_TYPE, IOCTL_RING+12, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_MAS_GET_RING_PERIOD \
    CTL_CODE(ACM_TYPE, IOCTL_RING+13, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_MAS_LOG_COM_STATUS \
    CTL_CODE(ACM_TYPE, IOCTL_RING+14, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_MAS_GET_RING_CYCLIC \
    CTL_CODE(ACM_TYPE, IOCTL_RING+15, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_MAS_GET_RING_SLAVE \
    CTL_CODE(ACM_TYPE, IOCTL_RING+16, METHOD_BUFFERED, FILE_ANY_ACCESS)

//************ROBOT*****************************************/
#define IOCTL_ACM_ROBOT_SET_MODE \
	CTL_CODE(ACM_TYPE, IOCTL_ROBOT+1, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_ROBOT_OPEN \
	CTL_CODE(ACM_TYPE, IOCTL_ROBOT+2, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_ROBOT_CLOSE \
	CTL_CODE(ACM_TYPE, IOCTL_ROBOT+3, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_ROBOT_REL \
	CTL_CODE(ACM_TYPE, IOCTL_ROBOT+4, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_ROBOT_ABS \
	CTL_CODE(ACM_TYPE, IOCTL_ROBOT+5, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_ROBOT_DIRECT_REL \
	CTL_CODE(ACM_TYPE, IOCTL_ROBOT+6, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_ROBOT_DIRECT_ABS \
	CTL_CODE(ACM_TYPE, IOCTL_ROBOT+7, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_ROBOT_LINE_REL \
	CTL_CODE(ACM_TYPE, IOCTL_ROBOT+8, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_ROBOT_LINE_ABS \
    CTL_CODE(ACM_TYPE, IOCTL_ROBOT+9, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_ROBOT_ARC_ABS  \
    CTL_CODE(ACM_TYPE, IOCTL_ROBOT+10, METHOD_BUFFERED, FILE_ANY_ACCESS)

#define IOCTL_ACM_ROBOT_ARC_REL  \
    CTL_CODE(ACM_TYPE, IOCTL_ROBOT+11, METHOD_BUFFERED, FILE_ANY_ACCESS)

//**********************************************************/
typedef struct _IOCTL_DEV_OPEN
{
	ULONG   DevNum;
	//HAND    BaseAddr;
	U64    BaseAddr;
	ULONG   BusNumber;
	ULONG   SlotNumber;
	ULONG   BoardID;
	ULONG   RingID;
	ULONG   Irq;
	ULONG   MasterBaudRate;
	TCHAR   SysDrvVer[7]; //x.x.x.x
//	TCHAR   DllDrvVer[7];
	ULONG   DevType;  //Add for PCI1245 and PCI1265 [Dan.Yang 2011.07.14]
	ULONG   MaxAxNum; //Add for PCI1245 and PCI1265 [Dan.Yang 2011.07.14]
	ULONG   MaxGpNum; //Add for PCI1245 and PCI1265 [Dan.Yang 2011.07.14]
	ULONG   MaxAxNumInGp; //Add for PCI1245 and PCI1265 [Dan.Yang 2011.07.14]
	ULONG  Result;
	
} IOCTL_DEV_OPEN,IOCTL_DEV_CLOSE, *PIOCTL_DEV_OPEN;

typedef struct _IOCTL_DEV_BELONGSTO
{
	ULONG  DevNum;
	ULONG  Result;
	
} IOCTL_DEV_BELONGSTO, *PIOCTL_DEV_BELONGSTO;

typedef struct _IOCTL_DEV_GET_MASTER_DEV
{
	ULONG  DevNum;
	ULONG  Result;
	
} IOCTL_DEV_GET_MASTER_DEV, *PIOCTL_DEV_GET_MASTER_DEV;

typedef struct _IOCTL_DEV_GET_SLAVE_DEVS
{
	ULONG  Result;
	ULONG  DevNum[16];
	
} IOCTL_DEV_GET_SLAVE_DEVS, *PIOCTL_DEV_GET_SLAVE_DEVS;

typedef	struct _IOCTL_DEV_WRITE_EEPROM
{
	U16			EEPROMAddress;            // IN, Assign the EEPROM address
	U16			WriteValue;               // IN, The value to write
	ULONG		Result;
} IOCTL_DEV_WRITE_EEPROM, *PIOCTL_DEV_WRITE_EEPROM;

typedef	struct _IOCTL_DEV_READ_EEPROM
{
	U16			EEPROMAddress;            // IN, Assign the EEPROM address
	U16			ReadValue;                 // OUT, The port data.
	ULONG		Result;
} IOCTL_DEV_READ_EEPROM, *PIOCTL_DEV_READ_EEPROM;

/******Add for PCI1245&65 [dan.yang 06/15/2012]****/
typedef	struct _IOCTL_DEV_EEPROM_EX
{
	U16			PrivateID;            // IN, Assign the private ID
	U32         PassArray[4];
	U32         PassCnt;
	U32			DataBuffer[32];               // IN, The value buffer to write
	ULONG       DataCount;                //The data count to be written
	ULONG		Result;
} IOCTL_DEV_EEPROM_EX, *PIOCTL_DEV_EEPROM_EX;

typedef struct _IOCTL_AX_OPEN
{
	ULONG  DevNumber;
	USHORT phyAxisID;
    ULONG  ulPPU;
	ULONG  ulRange;
	//HAND   hSysAx;
	U64   hSysAx;
	ULONG  Result;
	
} IOCTL_AX_OPEN, *PIOCTL_AX_OPEN;

typedef struct _IOCTL_AX_CLOSE
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  Result;
	
} IOCTL_AX_CLOSE, *PIOCTL_AX_CLOSE;

typedef struct _IOCTL_DEV_GET_PROPERTY
{
	ULONG  DevNumber;
	ULONG  propertyID;
	ULONG  ulValue; 
	LONG   lValue; 
	ULONG  Result;
	
} IOCTL_DEV_GET_PROPERTY, *PIOCTL_DEV_GET_PROPERTY;

typedef struct _IOCTL_AX_SET_PROPERTY
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  propertyID;
	ULONG  ulValue; 
	LONG   lValue; 
	ULONG  Result;
	
} IOCTL_AX_SET_PROPERTY,IOCTL_AX_GET_PROPERTY,*PIOCTL_AX_GET_PROPERTY, *PIOCTL_AX_SET_PROPERTY;

typedef struct _IOCTL_GP_SET_PROPERTY
{
	ULONG  DevNumber;
	//HAND   hGp;
	U64    hGp;
	ULONG  propertyID;
	ULONG  ulValue;
	LONG   lValue; 
	ULONG  ulPPU;
	ULONG  ulRateReg;
	ULONG  Result;
	
} IOCTL_GP_SET_PROPERTY,IOCTL_GP_GET_PROPERTY,*PIOCTL_GP_GET_PROPERTY, *PIOCTL_GP_SET_PROPERTY;

typedef struct _IOCTL_AX_GET_STATE
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT State;
	ULONG  Result;
	
} IOCTL_AX_GET_STATE, *PIOCTL_AX_GET_STATE;

typedef struct _IOCTL_AX_RW_POSITION
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	LONG   Position;
	ULONG  Result;
	
} IOCTL_AX_RW_POSITION, *PIOCTL_AX_RW_POSITION;

typedef struct _IOCTL_AX_CHANGE_VEL
{
	ULONG  DevNumber;
	USHORT phyAxisID;
    ULONG  DrvVel;   //  [9/30/2011 dan.yang]:USHORT-->ULONG	
	ULONG  Result;
	
	//Add for pci1245 and pci1265 [dan.yang 2011.05.01]
	ULONG  Acc; 
	ULONG  Dec;
	ULONG DPReg;
	ULONG DlReg;
} IOCTL_AX_CHANGE_VEL, *PIOCTL_AX_CHANGE_VEL;

typedef struct _IOCTL_AX_CHANGE_POS
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT Dir;
	ULONG  NewPos;	
	ULONG  Result;
	
} IOCTL_AX_CHANGE_POS, *PIOCTL_AX_CHANGE_POS;

//  [3/25/2013 dan.yang]
typedef struct _IOCTL_AX_BCKLSH_CORRECT
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT Dir;
	SHORT  Pos;	
	ULONG  Result;	
} IOCTL_AX_BCKLSH_CORRECT, *PIOCTL_AX_BCKLSH_CORRECT;

typedef struct _IOCTL_AX_RD_VELOCITY
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  Velocity;
	ULONG  Result;
	
} IOCTL_AX_RD_VELOCITY, *PIOCTL_AX_RD_VELOCITY;

typedef struct _IOCTL_AX_GET_MOTION_IO
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  MotionIO;
	ULONG  Result;
	
} IOCTL_AX_GET_MOTION_IO, *PIOCTL_AX_GET_MOTION_IO;

typedef struct _IOCTL_AX_GET_MOTION_STATUS
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  Status;
	ULONG  Result;
	
} IOCTL_AX_GET_MOTION_STATUS, *PIOCTL_AX_GET_MOTION_STATUS;

typedef struct _IOCTL_GET_LAST_ERROR
{
	ULONG  DevNumber;			// Dean add
	USHORT HandleType;
	USHORT phyAxisID;
	//ULONG  DevNumber;			// Dean mask, DevNumber must be 1st paramter of structure
	//HAND  GpSysHandle; //provided by kernal
	U64  GpSysHandle;
	ULONG  Error;
	ULONG  Result;
	
} IOCTL_GET_LAST_ERROR, *PIOCTL_GET_LAST_ERROR;

typedef struct _IOCTL_AX_SET_SERVO_ON
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  OnOff;
	ULONG  Result;
	
} IOCTL_AX_SET_SERVO_ON, *PIOCTL_AX_SET_SERVO_ON;

typedef struct _IOCTL_AX_MOVE_REL
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	//ULONG  RateReg;
	USHORT Dir;
	ULONG  PulseReg;
	ULONG  RateReg;
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  DlReg;   
	ULONG  DPReg; 
//	USHORT MotType;  
	ULONG  Result;
	
} IOCTL_AX_MOVE_REL, *PIOCTL_AX_MOVE_REL;

typedef struct _IOCTL_AX_MOVE_ABS
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT Dir;
	LONG  PulseReg;
	ULONG  RateReg;
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  DlReg;  
	ULONG  DPReg; 
	ULONG  Result;	
} IOCTL_AX_MOVE_ABS, *PIOCTL_AX_MOVE_ABS;

//  [4/13/2011 dan.yang]:ADD FOR PCI1265 AND PCI1245
typedef struct _IOCTL_AX_MOVE_SUPER
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT Dir;
	LONG  PulseReg;
	ULONG  VelLReg;
	ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AKReg;
	ULONG  ALReg;
	ULONG  DPReg;
	ULONG  Result;	
} IOCTL_AX_MOVE_SUPER, *PIOCTL_AX_MOVE_SUPER;

typedef struct _IOCTL_AX_MOVE_VEL
{
	ULONG  DevNumber;
	USHORT phyAxisID; 
	USHORT Dir;
	ULONG  RangeReg;
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  DlReg;   
//	ULONG  DPReg; 
//	USHORT MotType; //WR3 
	ULONG  Result;
	USHORT usSCurveOrTCurve;	
} IOCTL_AX_MOVE_VEL, *PIOCTL_AX_MOVE_VEL;

typedef struct _IOCTL_AX_STOP_DEC
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	//ULONG  RateReg;
	//ULONG  AccReg;
	ULONG  DecReg; //  [12/14/2012 dan.yang]
	//ULONG  AkReg;
	//ULONG  AlReg;   
//	USHORT MotType;  
	ULONG  Result;
	
} IOCTL_AX_STOP_DEC, *PIOCTL_AX_STOP_DEC;

typedef struct _IOCTL_AX_STOP_EMG
{
	ULONG  DevNumber;
	USHORT phyAxisID;  
	USHORT MotType;  
	ULONG  Result;
	
} IOCTL_AX_STOP_EMG, *PIOCTL_AX_STOP_EMG;

typedef struct _IOCTL_AX_HOME_EX
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  RateReg;
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  DirMode;
	ULONG  HomeMode; //Add for pci1245 and pci 1265 [dan.yang 20110503]

	//HANDLE hAxHomeEvt;
	DECL_64Compat(HANDLE, hAxHomeEvt);
	ULONG  Result;

	ULONG  AccRate; //Add for pci1245 and pci 1265 [dan.yang 20110503]
	ULONG  DecRate; //Add for pci1245 and pci 1265 [dan.yang 20110503]
	
} IOCTL_AX_HOME_EX, *PIOCTL_AX_HOME_EX;

//Add for pci1265 and pci 1245 [dan.yang 20110429]
typedef struct _IOCTL_AX_HOME
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  PulseReg;
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AccRate;
	ULONG  DecRate;
	ULONG  DPReg;
	ULONG  DirMode;
	ULONG  HomeMode;
	ULONG  Result;
	
} IOCTL_AX_HOME, *PIOCTL_AX_HOME;

typedef struct _IOCTL_AX_RESET_ERR
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT usAxErrInfo;
	ULONG  Result;	
} IOCTL_AX_RESET_ERR, *PIOCTL_AX_RESET_ERR;

typedef struct _IOCTL_AX_GET_RANGE
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	//HAND  AxSysHandle;
	U64  AxSysHandle;
	ULONG Rate;
	ULONG  Result;	
} IOCTL_AX_GET_RANGE, *PIOCTL_AX_GET_RANGE;

typedef struct _IOCTL_GP_ADD_AXIS
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	//HAND  GpSysHandle; //provided by kernal
	//HAND  AxSysHandle;
	U64   GpSysHandle;
	U64   AxSysHandle;
	ULONG  GroupID;//Get from SYS driver
	ULONG  Result;
	
} IOCTL_GP_ADD_AXIS, *PIOCTL_GP_ADD_AXIS;

typedef struct _IOCTL_GP_REM_AXIS
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	//HAND  GpSysHandle; //provided by kernal
	U64  GpSysHandle;
	ULONG  Result;
	
} IOCTL_GP_REM_AXIS, *PIOCTL_GP_REM_AXIS;

typedef struct _IOCTL_GP_CLOSE
{
	ULONG  DevNumber;
	//HAND  GpSysHandle; //provided by kernal
	U64 GpSysHandle;
//	LONG   lGpID;
	ULONG  Result;
	
} IOCTL_GP_CLOSE, *PIOCTL_GP_CLOSE;

typedef struct _IOCTL_GP_GET_STATE
{
	ULONG  DevNumber;
	//HAND   GpSysHandle;
	U64 GpSysHandle;

	USHORT State;
	ULONG  Result;
	
} IOCTL_GP_GET_STATE, *PIOCTL_GP_GET_STATE;

typedef struct _IOCTL_GP_CHANGE_VEL
{
	ULONG  DevNumber;
	//HAND  GpSysHandle; //provided by kernal
	U64 GpSysHandle;
	ULONG  ulPPU;
	ULONG  RateReg[MAX_AXIS_NUM_PER_GP];
	ULONG  DPReg;  //[Add for pci1245 and pci1265.Dan.yang 2011.04.19]
	ULONG  DLReg;  //[Add for pci1245 and pci1265.Dan.yang 2011.04.19]
	ULONG  NewVel;  //  [11/17/2011 dan.yang]
	ULONG  Result;
	
} IOCTL_GP_CHANGE_VEL, *PIOCTL_GP_CHANGE_VEL;

typedef struct _IOCTL_GP_LINE_REL
{
	ULONG  DevNumber;
	//HAND  GpSysHandle; //provided by kernal
	U64 GpSysHandle;
	ULONG  ulPPU;
	ULONG  RateReg[MAX_AXIS_NUM_PER_GP];
	LONG   PulseReg[MAX_AXIS_NUM_PER_GP];
	ULONG  ipo_map[MAX_AXIS_NUM_PER_GP];//[Add for pci1245 and pci1265.Dan.yang 20110418]
	LONG   ipo_length; //[Add for pci1245 and pci1265.Dan.yang 20110418]
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  AlReg;   
	USHORT MotType; 
    USHORT  GpAxCnt;  //[Add for pci1245 and pci1265.Dan.yang 2011.04.18]
	ULONG  DPReg;
	ULONG  Result;	

} IOCTL_GP_LINE_REL, IOCTL_GP_LINE_ABS,*PIOCTL_GP_LINE_REL;

typedef struct _IOCTL_GP_ARC_REL
{
	ULONG  DevNumber;
	//HAND  GpSysHandle; //provided by kernal
	//DECL_64Compat(HAND, GpSysHandle);
	U64 GpSysHandle;
	ULONG  ulPPU;
	ULONG  RateReg[MAX_AXIS_NUM_PER_GP]; //  [6/3/2013 dan.yang]
	LONG  EndReg[MAX_AXIS_NUM_PER_GP]; //  [6/3/2013 dan.yang]
	LONG  CenterReg[MAX_AXIS_NUM_PER_GP]; //  [6/3/2013 dan.yang]
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  AlReg;   
	USHORT ArcDir;
	USHORT MotType; 
	ULONG  Result;
	//add for pci1245 and pci1265 [dan.yang 2011.04.19]
	F32  Arc_r;
	//ULONG Arc_r;
	ULONG  GpAxCnt;
	DOUBLE Arc_r_inver;
	//U64  Arc_r_inver;
	LONG  Ipo_length;
    ULONG  ipo_map[MAX_AXIS_NUM_PER_GP];
	ULONG  DPReg;
	
} IOCTL_GP_ARC_REL, IOCTL_GP_ARC_ABS,*PIOCTL_GP_ARC_REL,*PIOCTL_GP_ARC_ABS;

typedef struct _IOCTL_GP_ARC3D_REL
{
	ULONG  DevNumber;
	//HAND   GpSysHandle; //provided by kernal
	U64    GpSysHandle;
	ULONG  ulPPU;
	ULONG  RateReg[MAX_AXIS_NUM_PER_GP]; 
	LONG   EndReg[AXIS_NUM_3DARC]; 
	LONG   CenterReg[AXIS_NUM_3DARC]; 
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  AlReg;   
	CHAR ArcDir;
	USHORT MotType; 
	ULONG  Result;
	F32   Arc_r;
	ULONG  GpAxCnt;
	DOUBLE Arc_r_inver;
	LONG  Ipo_length;
    F32  ipo_map[MAX_AXIS_NUM_PER_GP];
	ULONG  DPReg;
} IOCTL_GP_ARC3D_REL, IOCTL_GP_ARC3D_ABS,*PIOCTL_GP_ARC3D_REL;
//Add for PCI-1245 and PCI-1265 [DAN.YANG 2011.06.28]

//Add for PCI-1245 and PCI-1265 [DAN.YANG 2011.06.28]
typedef struct _IOCTL_GP_HELIX_REL
{
	ULONG  DevNumber;
	//HAND  GpSysHandle; //provided by kernel
	U64 GpSysHandle;
	ULONG  ulPPU;
	LONG  EndReg[MAX_AXIS_NUM_PER_GP];
	LONG  CenterReg[MAX_AXIS_NUM_PER_GP];
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  AlReg;   
	USHORT ArcDir;
	USHORT MotType; 
	ULONG  Result;
	//add for pci1245 and pci1265 [dan.yang 2011.04.19]
	float  Arc_r; 
	ULONG  GpAxCnt;	
	DOUBLE  Arc_r_inver;
	LONG  Ipo_length;
    ULONG  ipo_map[MAX_AXIS_NUM_PER_GP];
	ULONG  DPReg;
	
} IOCTL_GP_HELIX_REL, IOCTL_GP_HELIX_ABS,*PIOCTL_GP_HELIX_REL;


typedef struct _IOCTL_GP_CUR_POS
{
	ULONG  DevNumber;
	//HAND  GpSysHandle; //provided by kernal
	U64 GpSysHandle;
	LONG  CurPos[MAX_AXIS_NUM_PER_GP];	
	ULONG AxCnt;
	ULONG Result;
} IOCTL_GP_CUR_POS, *PIOCTL_GP_CUR_POS;

typedef struct _IOCTL_GP_STOP_DEC
{
	ULONG  DevNumber;
	//HAND  GpSysHandle; //provided by kernal
	U64 GpSysHandle;
	ULONG  RateReg[3];
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  AlReg;   
	USHORT MotType;  
	ULONG  Result;
	
} IOCTL_GP_STOP_DEC, *PIOCTL_GP_STOP_DEC;

typedef struct _IOCTL_GP_STOP_EMG
{
	ULONG  DevNumber;
	//HAND  GpSysHandle; //provided by kernal
	U64 GpSysHandle;
	USHORT MotType;  
	ULONG  Result;
	
} IOCTL_GP_STOP_EMG, *PIOCTL_GP_STOP_EMG;

typedef struct _IOCTL_GET_EVT_STATUS
{
	ULONG  DevNumber;
	ULONG  Status;  
	ULONG  Result;
	
} IOCTL_GET_EVT_STATUS, *PIOCTL_GET_EVT_STATUS;

//[Add for pci1265 and pci1245. 20110418. Dan.Yang]
typedef struct _IOCTL_GP_GET_AXCMDPOS 
{
	ULONG DevNumber;
	//HAND  GpSysHandle;
	U64 GpSysHandle;
	ULONG AxCmdPos[MAX_AXIS_NUM_PER_GP];
	ULONG AxCnt;
	ULONG Result;
}IOCTL_GP_GET_AXCMDPOS, *PIOCTL_GP_GET_AXCMDPOS;

//[Add for pci1245 and pci1265. 20110607.Dan.Yang]
typedef struct _IOCTL_GP_GET_CMDVEL 
{
	ULONG DevNumber;
	//HAND  GpSysHandle;
	U64 GpSysHandle;
	ULONG CmdVel;
	ULONG Result;
}IOCTL_GP_GET_CMDVEL, *PIOCTL_GP_GET_CMDVEL;

typedef struct _IOCTL_GP_RESET_ERR
{
	ULONG  DevNumber;
	//HAND  GpSysHandle;
	U64 GpSysHandle;
//	LONG   lGpId;
	ULONG  Result;
	
} IOCTL_GP_RESET_ERR, *PIOCTL_GP_RESET_ERR;

typedef struct _IOCTL_GP_GET_PPUANDRATE
{
	ULONG  DevNumber;
	//HAND  GpSysHandle;
	U64 GpSysHandle;
	ULONG PPU[MAX_AXIS_NUM_PER_GP];
	ULONG Rate[MAX_AXIS_NUM_PER_GP];
	USHORT AxisCnt;
//	LONG   lGpId;
	ULONG  Result;
	
} IOCTL_GP_GET_PPUANDRATE, *PIOCTL_GP_GET_PPUANDRATE;

typedef struct _DEV_EVENT_INFO
{
	U32        EvtAxisInfo[Axis_NUM];
	U32        EvtGpInfo[MAX_GP_NUM_PER_DEV];	// 32 bits = max 32 groups
} DEV_EVENT_INFO, *PDEV_EVENT_INFO;

typedef struct _IOCTL_DEV_EVENT_INFO
{
	DEV_EVENT_INFO EvtInfo;
	//HANDLE   hDevEvent;
	//DECL_64Compat(HANDLE, hDevEvent);
	//U64       hDevEvent;
	DECL_64Compat(HANDLE,hDevEvent);
	U32        Result;
	
} IOCTL_DEV_EVENT_INFO, *PIOCTL_DEV_EVENT_INFO;

typedef struct _IOCTL_DEV_CANCEL_EVENT
{
//	DEV_EVENT_INFO EvtInfo;
	//HANDLE   hDevEvent;
	DECL_64Compat(HANDLE, hDevEvent);
	U32        Result;
	
} IOCTL_DEV_CANCEL_EVENT, *PIOCTL_DEV_CANCEL_EVENT;

typedef struct _GP_PATH_SEC
{
	UCHAR   Cmd;
	UCHAR   Mode; //DEC_DIS,DEC_EN
	USHORT  AxisNum; //  [11/4/2011 dan.yang]
	ULONG   VelLReg;
    ULONG   VelHReg;
	LONG   CenterReg[3];
	LONG   EndReg[MAX_INTERPOLATION_AXES_NUM];
	//HAND   GpHand;
	U64 GpHand;
	//Add for pci1245 and pci1265 [dan.yang 2011.05.04]
	ULONG  	AccReg;
	ULONG  	DecReg;
	ULONG  	AkReg;
	ULONG  	AlReg; 
	ULONG   DPReg;
	F32  Arc_r;
	DOUBLE  Arc_r_inver;
	LONG  Ipo_length;
    ULONG  ipo_map[MAX_AXIS_NUM_PER_GP];
	
} GP_PATH_SEC, *PGP_PATH_SEC;

//GP_PATH structure is used by sys
typedef struct _GP_PATH
{
	ULONG  	PathCnt;	
	GP_PATH_SEC  Path[PATH_MAX_CNT];
	
} GP_PATH, *PGP_PATH;

typedef struct _IOCTL_GP_CONTI_PATH
{
	ULONG    DevNumber;
	//HAND  	GpSysHandle; //provided by kernel
	U64 GpSysHandle;
	ULONG   ulPPU;
	ULONG  	RateReg[MAX_INTERPOLATION_AXES_NUM];
	ULONG  	AccReg;
	ULONG  	DecReg;
	ULONG  	AkReg;
	ULONG  	AlReg;   
	//USHORT 	MotType; used to determine SynTLineIpo...
	ULONG  	PathCnt;	
	BOOLEAN	IsPathDec;
	GP_PATH_SEC  Path[PATH_MAX_CNT];	
	ULONG  	Result;	
} IOCTL_GP_CONTI_PATH, *PIOCTL_GP_CONTI_PATH;

//Add for pci1265 and pci1245 [dan.yang 2011.05.06]
typedef struct _IOCTL_GP_MOVE_PATH
{
	ULONG    DevNumber;
	//HAND  	GpSysHandle; //provided by kernel
	U64 GpSysHandle;
	ULONG  	Result;	
} IOCTL_GP_MOVE_PATH, *PIOCTL_GP_MOVE_PATH;

//Add for pci1265 and pci1245 [dan.yang 2011.06.21]
typedef struct _IOCTL_GP_MOVE_SEL_PATH
{
	ULONG    DevNumber;
	//HAND  	GpSysHandle; //provided by kernel
	U64 GpSysHandle;
	ULONG   StartIndex;
	ULONG   EndIndex;
	ULONG   Repeat;  //1:repeat 0:not repeat
	ULONG  	Result;	
} IOCTL_GP_MOVE_SEL_PATH, *PIOCTL_GP_MOVE_SEL_PATH;

typedef struct _IOCTL_GP_ADD_PATH
{
	ULONG    DevNumber;
	//HAND  	GpSysHandle; //provided by kernel
	U64 GpSysHandle;
	ULONG  	PathCnt;	
	GP_PATH_SEC  Path[PATH_MAX_CNT];	
	ULONG  	Result;	
} IOCTL_GP_ADD_PATH, *PIOCTL_GP_ADD_PATH;

typedef struct _IOCTL_GP_RST_PATH
{
	ULONG    DevNumber;
	//HAND  	GpSysHandle; //provided by kernel
	U64 GpSysHandle;
	ULONG  	Result;	
} IOCTL_GP_RST_PATH, *PIOCTL_GP_RST_PATH;

typedef struct _IOCTL_GP_GET_PATH_STATUS
{
	ULONG    DevNumber;
	//HAND  	GpSysHandle; //provided by kernel
	U64 GpSysHandle;
	U32     CurIndex;
	U32     CurCmdFunc;
	U32     RemainCount;
	U32     FreeSpaceCnt;
	ULONG     AxisNum;     //[Dan.Yang 2011.07.25]
	ULONG     MotionDir;   //[Dan.Yang 2011.07.25]
	ULONG  	Result;	
} IOCTL_GP_GET_PATH_STATUS, *PIOCTL_GP_GET_PATH_STATUS;

//[Add for PCi1245 and PCI 1265. Dan.Yang 2011.06.22]
typedef struct _IOCTL_GP_GET_INDEX_PATH_STATUS
{
	ULONG   DevNumber;
	//HAND  	GpSysHandle; //provided by kernel
	U64 GpSysHandle;
	ULONG 	Index;				// index of path
	USHORT	CmdFunc; 
	USHORT	MoveMode;
	ULONG 	FH;
	ULONG 	FL; 
	ULONG 	EndPoint_DataArray[MAX_INTERPOLATION_AXES_NUM]; 
	ULONG 	CenPoint_DataArray[3];
	ULONG  	Result;	
} IOCTL_GP_GET_INDEX_PATH_STATUS, *PIOCTL_GP_GET_INDEX_PATH_STATUS;

typedef struct _IOCTL_GP_DIRECT_PATH_WITH_SYSBUF
{
	ULONG    DevNumber;
	//HAND  	GpSysHandle; //provided by kernal
	U64 GpSysHandle;
	ULONG   ulPPU;
	ULONG  	RateReg[MAX_INTERPOLATION_AXES_NUM];
	ULONG  	AccReg;
	ULONG  	DecReg;
	ULONG  	AkReg;
	ULONG  	AlReg; 
	BOOLEAN	IsPathDec;
	ULONG  	Result;	
} IOCTL_GP_DIRECT_PATH, *PIOCTL_GP_DIRECT_PATH;

typedef struct _PATH_SEC
{
	UCHAR  cmd;
	UCHAR  mode;
	DOUBLE FH;
    DOUBLE FL;
// 	LONG   center[3]; //  [2/29/2008 kiya.chen] Distance must change to double
// 	LONG   end[4];
	DOUBLE   center[3];
 	DOUBLE   end[MAX_INTERPOLATION_AXES_NUM];
	
} PATH_SEC, *PPATH_SEC;

typedef struct _AdvPath
{
	 ULONG    				  count;
	 PATH_SEC                 path[PATH_MAX_CNT];
	 struct _AdvPath  		  *pNext;
	 struct _AdvPath  		  *pPre;
	 
}AdvPath, *PAdvPath;

//********************************************************************

//Add for Pci1265 and pci1245 [dan.yang 20110429]
typedef struct _IOCTL_AX_CompAuto
{
	ULONG      DevNumber;
	USHORT     phyAxisID;
	ULONG      Start;
	ULONG      End;
	ULONG      Interval;
	ULONG      ulCmpNum;
	ULONG      Result;
}IOCTL_AX_CompAuto, *PIOCTL_AX_CompAuto;

typedef struct _IOCTL_AX_CompTable
{
	ULONG      DevNumber;
	USHORT     phyAxisID;
	USHORT     usCmpDir;
	ULONG      ulCmpNum;
	ULONG      ulTotalleng;
	ULONG      dataIndex;
	ULONG      Result;
	LONG	   CompBuffer[0];
}IOCTL_AX_CompTable, *PIOCTL_AX_CompTable;

typedef struct _IOCTL_AX_GetCompData
{
	ULONG      DevNumber;
	USHORT     phyAxisID;
	ULONG      Result;
	LONG	   Data;
}IOCTL_AX_GetCompData, *PIOCTL_AX_GetCompData;

typedef struct _IOCTL_AX_GetCompStatus
{
	ULONG      DevNumber;
	USHORT     phyAxisID;
	ULONG      Result;
	ULONG	   Index;
	ULONG      Remain;
}IOCTL_AX_GetCompStatus, *PIOCTL_AX_GetCompStatus;
typedef struct _IOCTL_AX_SetPWMTableOnTime
{
	ULONG      DevNumber;
	USHORT     phyAxisID;
	USHORT      COUNT;
	ULONG     dataIndex;
	ULONG      Result;
	ULONG      PWMTable[0];
	
}IOCTL_AX_SetPWMTableOnTime, *PIOCTL_AX_SetPWMTableOnTime;


typedef struct _IOCTL_AX_SetPWMOUT//zhaocui add 20131226
{
	ULONG      DevNumber;
	USHORT     phyAxisID;
	ULONG      OFForON;
	ULONG      Result;	
}IOCTL_AX_SetPWMOUT, *PIOCTL_AX_SetPWMOUT;


typedef struct _IOCTL_AX_DOSetBit
{
	ULONG      DevNumber;
	USHORT     phyAxisID;
	USHORT     usChannel;
	U8         BitData;	
	ULONG      Result;
}IOCTL_AX_DOSetBit, IOCTL_AX_DOGetBit,IOCTL_AX_DiGetBit,*PIOCTL_AX_DOSetBit,*PIOCTL_AX_DOGetBit;

typedef struct _IOCTL_AX_SetExtDrive
{
	ULONG      DevNumber;
	USHORT     phyAxisID;
	U16        ExtDrvMode;
	ULONG      Result;

	//Add for pci1265 and pci1245
	ULONG  RateReg;
    ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  DlReg;  
}IOCTL_AX_SetExtDrive,*PIOCTL_AX_SetExtDrive;

typedef struct _IOCTL_RB_SetExtDrive
{
	ULONG      DevNumber;
	USHORT     phyAxisID;
	//ULONG      Cosys;
	USHORT       ExtDrvMode;
	ULONG      Result;

	//Add for pci1265 and pci1245
	ULONG  RateReg;
    ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  DlReg;  
}IOCTL_RB_SetExtDrive,*PIOCTL_RB_SetExtDrive;

typedef struct _IOCTL_AX_SIMULATE_START_SUSPEND_ABS
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT Dir;
	LONG   PulseReg;
	ULONG  RateReg;
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  DlReg;  
	ULONG  DPReg; 
	ULONG  Result;	
} IOCTL_AX_SIMULATE_START_SUSPEND_ABS, *PIOCTL_AX_SIMULATE_START_SUSPEND_ABS;

typedef struct _IOCTL_AX_SIMULATE_START_SUSPEND
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT Dir;
	LONG   PulseReg;
	ULONG  RateReg;
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  DlReg;  
	ULONG  DPReg; 
	ULONG  Result;	
} IOCTL_AX_SIMULATE_START_SUSPEND, *PIOCTL_AX_SIMULATE_START_SUSPEND;

typedef struct _IOCTL_RB_SIMULATE_START_SUSPEND
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  CoSys;
	USHORT Dir;
	LONG   PulseReg;
	ULONG  RateReg;
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  DlReg;  
	ULONG  DPReg; 
	ULONG  Result;	
} IOCTL_RB_SIMULATE_START_SUSPEND, *PIOCTL_RB_SIMULATE_START_SUSPEND;

typedef struct _IOCTL_AX_SIMULATE_START
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  Result;	
} IOCTL_AX_SIMULATE_START, *PIOCTL_AX_SIMULATE_START;

typedef struct _IOCTL_AX_SIMULATE_STOP
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  Result;	
} IOCTL_AX_SIMULATE_STOP, *PIOCTL_AX_SIMULATE_STOP;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_AMN_DEV_OPEN
{
	ULONG  DevNumber;	
	ULONG  Result;
	
} IOCTL_AMN_DEV_OPEN, *PIOCTL_AMN_DEV_OPEN;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_DEV_EVENT_INFO_AMONET
{
	ULONG			DevNumber;	
	DEV_EVENT_INFO	EvtInfo;
	//HANDLE			hDevEvent;		// 1 device event
	//DECL_64Compat(HANDLE, hDevEvent);
	U64				hDevEvent; //  [10/24/2013 Dandan.Yang]
	U32				Result;
	
} IOCTL_DEV_EVENT_INFO_AMONET, *PIOCTL_DEV_EVENT_INFO_AMONET;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_AX_OPEN_AMONET
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  Result;
	
} IOCTL_AX_OPEN_AMONET, *PIOCTL_AX_OPEN_AMONET;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_DEV_FW_DOWNLOAD_AMONET
{
	ULONG  DevNumber;	
	ULONG  Data[1]; 
	LONG   DataID[1]; 
	ULONG  Result;	
} IOCTL_DEV_FW_DOWNLOAD_AMONET, *PIOCTL_DEV_FW_DOWNLOAD_AMONET;

// AX
// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_AX_RESET_ALARM
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  OnOff;
	ULONG  Result;
	
} IOCTL_AX_RESET_ALARM, *PIOCTL_AX_RESET_ALARM;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_AX_SET_ERC_ON
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  OnOff;
	ULONG  Result;
	
} IOCTL_AX_SET_ERC_ON, *PIOCTL_AX_SET_ERC_ON;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_AX_MOVE_REL_AMONET
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT Dir;
	ULONG  PulseReg;
	USHORT MotType;  
	USHORT PEDDLE_1;
	ULONG  Result;

	// for amonet
	ULONG  Reg_ulRMG;
	ULONG  Reg_ulRFH;
	ULONG  Reg_ulRFL;
	ULONG  Reg_ulRFA;
	ULONG  Reg_ulRUR;
	ULONG  Reg_ulRDR;
	ULONG  Reg_ulRUS;
	ULONG  Reg_ulRDS;	
} IOCTL_AX_MOVE_REL_AMONET, *PIOCTL_AX_MOVE_REL_AMONET;

// Add for PCI-1202	[Dean 2009.11.12] 
typedef struct _IOCTL_AX_MOVE_VEL_AMONET
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT Dir;
	USHORT MotType;  
	USHORT PEDDLE_1;
	ULONG  Result;

	// for amonet
	ULONG  Reg_ulRMG;
	ULONG  Reg_ulRFH;
	ULONG  Reg_ulRFL;
	ULONG  Reg_ulRFA;
	ULONG  Reg_ulRUR;
	ULONG  Reg_ulRDR;
	ULONG  Reg_ulRUS;		
	ULONG  Reg_ulRDS;		
} IOCTL_AX_MOVE_VEL_AMONET, *PIOCTL_AX_MOVE_VEL_AMONET;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_AX_HOME_EX_AMONET
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT PEDDLE_1;
	ULONG  DirMode;
	//HANDLE hHomeEvent;	
	U64	   hHomeEvent;
	ULONG  Result;
	
	// for amonet	
	ULONG  Reg_ulRMG;
	ULONG  Reg_ulRFH;
	ULONG  Reg_ulRFL;
	ULONG  Reg_ulRUR;
	ULONG  Reg_ulRDR;
	
} IOCTL_AX_HOME_EX_AMONET, *PIOCTL_AX_HOME_EX_AMONET;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_AX_CHANGE_VEL_AMONET
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT PEDDLE_1;	
	ULONG  Result;
	
	// for amonet
	ULONG  Reg_ulRFH;
	ULONG  Reg_ulRUR;
	ULONG  VelChangePulse;
	ULONG  NewRampDown;

} IOCTL_AX_CHANGE_VEL_AMONET, *PIOCTL_AX_CHANGE_VEL_AMONET;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_AX_CHANGE_POS_AMONET
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT PEDDLE_1;	
	ULONG  PulseReg;
	ULONG  Result;
	
	// for amonet
	ULONG  Reg_ulRDP;

} IOCTL_AX_CHANGE_POS_AMONET, *PIOCTL_AX_CHANGE_POS_AMONET;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_AX_STOP_DEC_AMONET
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT MotType;  
	ULONG  Result;
	
	// for amonet	
	ULONG  Reg_ulRDR;
	ULONG  Reg_ulRDS;		
	
} IOCTL_AX_STOP_DEC_AMONET, *PIOCTL_AX_STOP_DEC_AMONET;


// LATCH, Compare
// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_AX_LATCH_DATA
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	LONG   PositionNo;
	LONG   Position;
	ULONG  Result;
	
} IOCTL_AX_LATCH_DATA, *PIOCTL_AX_LATCH_DATA;

//Add for PCI1245 and pci1265 [dan.yang 2011.04.28]
typedef struct _IOCTL_AX_LATCH_RESET
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  Result;	
} IOCTL_AX_LATCH_RESET, *PIOCTL_AX_LATCH_RESET;

//Add for PCI1245 and pci1265 [dan.yang 2011.04.28]
typedef struct _IOCTL_AX_LATCH_FLAG
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT Flag;
	ULONG  Result;	
} IOCTL_AX_LATCH_FLAG, *PIOCTL_AX_LATCH_FLAG;
//Add for PCI1245 and pci1265 [dan.yang 2011.05.11]
typedef struct _IOCTL_AX_LATCH_TRIGGER
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  Result;	
} IOCTL_AX_LATCH_TRIGGER, *PIOCTL_AX_LATCH_TRIGGER;

//Add for PCI1245 and pci1265 [dan.yang 2011.06.23]
typedef struct _IOCTL_AX_CAM
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	UCHAR  MasterID;
	UCHAR  CamTableID;
	ULONG  Mas_Offset;
	ULONG  Slv_Offset;
	F32  Mas_Ratio;
	F32  Slv_Ratio;
	F32  Mas_Ratio_Invert;
	USHORT  ref_src;
    USHORT  Dir;
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  DlReg;  
	ULONG  DPReg;  	
	ULONG  Result;	
} IOCTL_AX_CAM, *PIOCTL_AX_CAM;

//Add for PCI1245 and pci1265 [dan.yang 2011.06.23]
typedef struct _IOCTL_AX_GEAR
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	UCHAR  MasterID;
  	UCHAR  Absolute;
	F32  Slv_Ratio;

	USHORT  ref_src;
    USHORT  Dir;
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  DlReg;  
	ULONG  DPReg;  	
	ULONG  Result;	
} IOCTL_AX_GEAR, *PIOCTL_AX_GEAR;

//Add for PCI-1245 and PCI-1265 [Dan.yang 2011.06.24]
typedef struct _IOCTL_AX_TANGENT_GP
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT GroupID;
	ULONG  RefPlane;
	ULONG  VectorArry[3];
	ULONG  Dir;
	ULONG  Result;	
} IOCTL_AX_TANGENT_GP, *PIOCTL_AX_TANGENT_GP;

//Add for PCI-1245 and PCI-1265 [Dan.yang 2011.06.24]
typedef struct _IOCTL_AX_GANTRY
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	USHORT MasAxisID;
    ULONG  RefMasterSrc;
	ULONG  VelLReg;
    ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  DlReg;  
	ULONG  DPReg;  	
	ULONG  Dir;
	ULONG  Result;	
} IOCTL_AX_GANTRY, *PIOCTL_AX_GANTRY;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_AX_TRIG_LATCH
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG  Result;
	
} IOCTL_AX_TRIG_LATCH, *PIOCTL_AX_TRIG_LATCH;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_AX_CMP_STATUS
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	ULONG   CurIndex;		
	ULONG   RemainCount;
	ULONG  Result;
		
} IOCTL_AX_CMP_STATUS, *PIOCTL_AX_CMP_STATUS;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_AX_CMP_TABLE_AMONET
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	LONG   ArrayCount;		
	LONG   TableArray[10000];
	ULONG  Result;
		
} IOCTL_AX_CMP_TABLE_AMONET, *PIOCTL_AX_CMP_TABLE_AMONET;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_AX_CMP_AUTO
{
	ULONG  DevNumber;
	USHORT phyAxisID;
	LONG   Start;		
	LONG   End;		
	LONG   Interval;		
	ULONG  Result;
		
} IOCTL_AX_CMP_AUTO, *PIOCTL_AX_CMP_AUTO;

// Group
// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_GP_LINE_REL_AMONET
{
	ULONG  DevNumber;
	//HAND  GpSysHandle; //provided by kernal
	U64 GpSysHandle;
	ULONG  RateReg[MAX_AXIS_NUM_PER_GP];
	LONG  PulseReg[MAX_AXIS_NUM_PER_GP];
	USHORT MotType; 
	USHORT Reserved; 

	// for amonet	
	ULONG  Reg_ulRMG; 
	ULONG  Reg_ulRFH;
	ULONG  Reg_ulRFL;
	ULONG  Reg_ulRFA;
	ULONG  Reg_ulRUR;
	ULONG  Reg_ulRDR;
	ULONG  Reg_ulRUS;
	ULONG  Reg_ulRDS;
	ULONG  Reg_ulRDP;

	ULONG  Result;	

} IOCTL_GP_LINE_REL_AMONET, IOCTL_GP_LINE_ABS_AMONET,*PIOCTL_GP_LINE_REL_AMONET;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_GP_ARC_REL_AMONET
{
	ULONG	DevNumber;
	//HAND	GpSysHandle; //provided by kernal
	//DECL_64Compat(HAND, GpSysHandle);
	U64 GpSysHandle;
	LONG	EndReg[2];
	LONG	CenterReg[2];
	USHORT	ArcDir;
	USHORT	MotType; 
	
	ULONG	Result;
	
	// for amonet	
	ULONG  Reg_ulRMG; 
	ULONG  Reg_ulRFH;
	ULONG  Reg_ulRFL;
	ULONG  Reg_ulRFA;
	ULONG  Reg_ulRUR;
	ULONG  Reg_ulRDR;
	ULONG  Reg_ulRUS;
	ULONG  Reg_ulRDS;
	ULONG  Reg_ulRDP;
	ULONG  Reg_ulRCI;
} IOCTL_GP_ARC_REL_AMONET, IOCTL_GP_ARC_ABS_AMONET,*PIOCTL_GP_ARC_REL_AMONET;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_GP_CHANGE_VEL_AMONET
{
	ULONG  DevNumber;
	//HAND   GpSysHandle; //provided by kernal
	U64 GpSysHandle;
	ULONG  Result;
	
	// for amonet	
	ULONG  Reg_ulRFH;
	ULONG  NewRampDown; 
	
} IOCTL_GP_CHANGE_VEL_AMONET, *PIOCTL_GP_CHANGE_VEL_AMONET;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _GP_PATH_AMONET
{
	UCHAR   Cmd;
	UCHAR   Mode;
	ULONG   VelLReg;
    ULONG   VelHReg;
	ULONG   CenterReg[3];
	ULONG   EndReg[4];
	
} GP_PATH_AMONET, *PGP_PATH_AMONET;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_GP_CONTI_PATH_AMONET
{
	ULONG    DevNumber;
	//HAND  	GpSysHandle; //provided by kernel
	U64 GpSysHandle;
	ULONG  	PathCnt;	
	GP_PATH_AMONET Path[600];	
	ULONG  	Result;
    USHORT 	MotType;  

	// for amonet	
	ULONG  Reg_ulRMG; 
	ULONG  Reg_ulRFH;
	ULONG  Reg_ulRFL;
	ULONG  Reg_ulRFA;
	ULONG  Reg_ulRUR;
	ULONG  Reg_ulRDR;
	ULONG  Reg_ulRUS;
	ULONG  Reg_ulRDS;	
 	ULONG  Reg_ulRDP[600];
 	ULONG  Reg_ulRCI[600];
} IOCTL_GP_CONTI_PATH_AMONET, *PIOCTL_GP_CONTI_PATH_AMONET;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_GP_ADD_PATH_AMONET
{
	ULONG   DevNumber;
	//HAND  	GpSysHandle; //provided by kernel
	U64 GpSysHandle;
	GP_PATH_AMONET  Path;	
	ULONG  	Result;
	
	USHORT 	MotType; 

	// for amonet	
	ULONG  Reg_ulRMG; 
	ULONG  Reg_ulRFH;
	ULONG  Reg_ulRFL;
	ULONG  Reg_ulRFA;
	ULONG  Reg_ulRUR;
	ULONG  Reg_ulRDR;
	ULONG  Reg_ulRUS;
	ULONG  Reg_ulRDS;	
 	ULONG  Reg_ulRDP;
 	ULONG  Reg_ulRCI;

} IOCTL_GP_ADD_PATH_AMONET, *PIOCTL_GP_ADD_PATH_AMONET;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_GP_CONTI_RESET_PATH
{
	ULONG    DevNumber;
	//HAND  	 GpSysHandle; //provided by kernel
	U64 GpSysHandle;
	ULONG  	 Result;
	
} IOCTL_GP_CONTI_RESET_PATH, *PIOCTL_GP_CONTI_RESET_PATH;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_GP_CONTI_PATH_STATUS
{
	ULONG    DevNumber;
	//HAND  	GpSysHandle; //provided by kernel
	U64 GpSysHandle;
	ULONG	CurIndex;
	ULONG	CurCmdFunc;
	ULONG	StockCmdCount;
	ULONG	FreeSpaceCount;
	ULONG  	Result;
	
} IOCTL_GP_CONTI_PATH_STATUS, *PIOCTL_GP_CONTI_PATH_STATUS;

// master
// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_MAS_START_RING
{
	ULONG  DevNumber;	
	USHORT RingNo;
	ULONG  Result;
	
} IOCTL_MAS_START_RING, *PIOCTL_MAS_START_RING;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_DEV_SLAVE_INFO
{
	ULONG  DevNumber;	
	USHORT Info;
	ULONG  Result;
	
} IOCTL_DEV_SLAVE_INFO, *PIOCTL_DEV_SLAVE_INFO;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_DEV_ACTIVE_TABLE
{
	ULONG  DevNumber;	
	USHORT RingNo;
	ULONG  DevTable[2];
	ULONG  Result;
	
} IOCTL_DEV_ACTIVE_TABLE, *PIOCTL_DEV_ACTIVE_TABLE;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_MAS_ERR_TABLE
{
	ULONG  DevNumber;	
	USHORT RingNo;
	ULONG  ErrTable[2];
	ULONG  Result;
	
} IOCTL_MAS_ERR_TABLE, *PIOCTL_MAS_ERR_TABLE;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_MAS_GET_RING_PERIOD
{
	ULONG  DevNumber;	
	USHORT RingNo;
	ULONG  Period;
	ULONG  Result;
	
} IOCTL_MAS_GET_RING_PERIOD, *PIOCTL_MAS_GET_RING_PERIOD;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_MAS_GET_RING_CYCLIC
{
	ULONG  DevNumber;	
	USHORT RingNo;
	ULONG  Time;
	ULONG  Result;
	
} IOCTL_MAS_GET_RING_CYCLIC, *PIOCTL_MAS_GET_RING_CYCLIC;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_MAS_RING_SLAVE
{
	ULONG  DevNumber;	
	USHORT RingNo;
	ULONG	SlaveDevType[64];
	USHORT	SlaveDevInfo[64];
	ULONG	DevTable[2];
	ULONG  Result;

} IOCTL_MAS_RING_SLAVE, *PIOCTL_MAS_RING_SLAVE;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_MAS_COM_STATUS
{
	ULONG  DevNumber;	
	USHORT RingNo;
	USHORT Status;
	ULONG  Result;
	
} IOCTL_MAS_COM_STATUS, *PIOCTL_MAS_COM_STATUS;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_MAS_RING_STATUS
{
	ULONG  DevNumber;	
	USHORT RingNo;
	USHORT Status;
	ULONG  Result;
	
} IOCTL_MAS_RING_STATUS, *PIOCTL_MAS_RING_STATUS;


//property
// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_DEV_SET_PROPERTY
{
	ULONG  DevNumber;
	ULONG  propertyID;
	ULONG  ulValue; 
	LONG   lValue; 
	ULONG  Result;	
} IOCTL_DEV_SET_PROPERTY, *PIOCTL_DEV_SET_PROPERTY;


// DAQ: DIO function  
// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_DAQ_DIO
{
	ULONG  DevNumber;
	ULONG  PortNumber;
	ULONG  PortData;
	ULONG  Result;
	
} IOCTL_DAQ_DIO, *PIOCTL_DAQ_DIO;

// Add for PCI-1202	[Dean 2009.11.12]
typedef struct _IOCTL_DAQ_DIO_BIT
{
	ULONG  DevNumber;
	ULONG  PortNumber;
	ULONG  BitNumber;	
	ULONG  BitData;
	ULONG  Result;
	
} IOCTL_DAQ_DIO_BIT, *PIOCTL_DAQ_DIO_BIT;

typedef struct _IOCTL_DAQ_DIO_BYTES
{
	ULONG  DevNumber;
	ULONG  StartPortIndex;
	ULONG  PortCount;	
	ULONG  Result;
	ULONG  PortValueArray[0];

} IOCTL_DAQ_DIO_BYTES, *PIOCTL_DAQ_DIO_BYTES;

//[Add for PCI1245 and PCI1265 Dan.Yang 2011.07.19]
typedef struct _IOCTL_DAQ_AI
{
	ULONG DevNumber;
	ULONG AIChannel;
	ULONG AIData;
	ULONG Result;	
}IOCTL_DAQ_AI, *PIOCTL_DAQ_AI;

//  [12/15/2014 dan.yang]
typedef struct _IOCTL_DAQ_AO
{
	ULONG DevNumber;
	ULONG AOChannel;
	ULONG AOData;
	ULONG Result;	
}IOCTL_DAQ_AO, *PIOCTL_DAQ_AO;

//[Add for pci1245 and pci1265 dan.yang 2011.06.23]
typedef struct  _CAM_DATA
{
	F64					Xa;
	F64					Xb;
	F64					Xc;
	F64					Xs;
	F64					Xf;
		
	F64					Ya;
	F64					Yb;
	F64					Yc;
	F64					Yd;
}CAM_DATA, *PCAM_DATA;

//[Add for PCI1245&PCI1265 Dan.Yang 2011.08.22]
typedef struct _CAM_POINT 
{
	F64  MasterValue;
	F64  SlaveValue;
	F64  PointRange;
	F64  PointSlope;
}CAM_POINT, *PCAM_POINT;
//[Add for PCI1245&PCI1265 Dan.Yang 2011.08.22]
typedef struct _CAM_TABLE 
{
	U32  PointCount;
	U32  Range;
	CAM_POINT PointArray[CAMPOINT_MAX_CNT];
}CAM_TABLE, *PCAM_TABLE;

//[Add for pci1245 and pci1265 dan.yang 2011.06.23]
typedef struct _IOCTL_DEV_DOWNLOAD_CAMINFO
{
    ULONG  DevNumber;
    ULONG CamTableID;
	ULONG ActrualPointsNum;
    ULONG CamMasLength;
	ULONG Result;
}IOCTL_DEV_DOWNLOAD_CAMINFO, *PIOCTL_DEV_DOWNLOAD_CAMINFO;
//[Add for pci1245 and pci1265 dan.yang 2011.12.13]
typedef struct _IOCTL_DEV_DOWNLOAD_CAMDATA
{
    ULONG DevNumber;
    ULONG CamTableID;
	ULONG DataIndex;
	ULONG Result;
	CAM_DATA CamData_Array[0];
}IOCTL_DEV_DOWNLOAD_CAMDATA, *PIOCTL_DEV_DOWNLOAD_CAMDATA;

//[Add for pci1245 and pci1265.dan.yang 2011.06.23]
typedef struct _IOCTL_DEV_CONFIG_CAMTABLE 
{
	ULONG DevNumber;
	ULONG CamTableID;
	UCHAR Periodic; //0: Periodic 1:Non-periodic
	UCHAR MasterAbsolute; //0:Relative 1:Absolute
    UCHAR SlaveAbsolute;  //0:Relative 1:Absolute
	ULONG Result;
}IOCTL_DEV_CONFIG_CAMTABLE, *PIOCTL_DEV_CONFIG_CAMTABLE;

//[Dan.Yang 2011.07.11]
typedef struct _IOCTL_DEV_DOWNLOAD_DSPFIRMWARE 
{
	ULONG DevNumber;
	U8	  FileBuffer[128*1024];
	ULONG FileLength;
	ULONG FileLength_uint;
	ULONG DownLoadCount;
	ULONG Result;
}IOCTL_DEV_DOWNLOAD_DSPFIRMWARE, *PIOCTL_DEV_DOWNLOAD_DSPFIRMWARE;

//[Dan.Yang 2011.07.11]
typedef struct _IOCTL_DEV_GET_DOWNLOAD_DSPFMRATE
{
	ULONG DevNumber;
	ULONG FmWarePktCnt;
	ULONG FmErrStatus;
	USHORT FmStep;
	ULONG Result;
}IOCTL_DEV_GET_DOWNLOAD_DSPFMRATE, *PIOCTL_DEV_GET_DOWNLOAD_DSPFMRATE;

//[Dan.Yang 2011.07.12]
typedef struct _IOCTL_DEV_DOWNLOAD_DSPFIRMWARE_STP1 
{
	ULONG DevNumber;
	ULONG Result;
}IOCTL_DEV_DOWNLOAD_DSPFIRMWARE_STP1, *PIOCTL_DEV_DOWNLOAD_DSPFIRMWARE_STP1;
//[Dan.Yang 2011.07.12]
typedef struct _IOCTL_DEV_DOWNLOAD_DSPFIRMWARE_STP2 
{
	ULONG DevNumber;
	ULONG FileIndex;
	ULONG DataSize;
	ULONG CheckFmSum;
	ULONG Result;
	U8	  FileBuffer[0];
}IOCTL_DEV_DOWNLOAD_DSPFIRMWARE_STP2, *PIOCTL_DEV_DOWNLOAD_DSPFIRMWARE_STP2;
//[Dan.Yang 2011.07.12]
typedef struct _IOCTL_DEV_DOWNLOAD_DSPFIRMWARE_STP3 
{
	ULONG DevNumber;
	ULONG Result;
}IOCTL_DEV_DOWNLOAD_DSPFIRMWARE_STP3, *PIOCTL_DEV_DOWNLOAD_DSPFIRMWARE_STP3;

//[Dan.Yang 2011.07.12]
typedef struct _IOCTL_DEV_DOWNLOAD_DSPFIRMWARE_STP3_CHECKDONE 
{
	ULONG DevNumber;
	ULONG Result;
	ULONG FwStepDone;
	//ULONG CheckFwSum;
}IOCTL_DEV_DOWNLOAD_DSPFIRMWARE_STP3_CHECKDONE, *PIOCTL_DEV_DOWNLOAD_DSPFIRMWARE_STP3_CHECKDONE;

//  [4/27/2012 dan.yang]
typedef struct _IOCTL_DEV_DOWNLOAD_CPLD
{
	ULONG DevNumber;
	ULONG CPLDNum;
	ULONG SectorIndex;
	ULONG Result;
}IOCTL_DEV_DOWNLOAD_CPLD,*PIOCTL_DEV_DOWNLOAD_CPLD;

//  [4/27/2012 dan.yang]
typedef struct _IOCTL_DEV_DOWNLOAD_CPLD_FILE
{
	ULONG DevNumber;
	ULONG CPLDNum;
	ULONG Result;
	USHORT SectorIndex;
	USHORT OffSet;
	U8    FileBuffer[0];
}IOCTL_DEV_DOWNLOAD_CPLD_FILE, *PIOCTL_DEV_DOWNLOAD_CPLD_FILE;

//  [6/13/2012 dan.yang]
typedef struct _IOCTL_DEV_CONFIG_MDAQ
{
	ULONG DevNumber;
	ULONG AxisNo;
	ULONG ChannelID;
	ULONG Peroid;
	ULONG ChanType;
	ULONG MaxCount;
	ULONG Method;
	ULONG Result;
}IOCTL_DEV_CONFIG_MDAQ, *PIOCTL_DEV_CONFIG_MDAQ;

//  [6/13/2012 dan.yang]
typedef struct _IOCTL_DEV_START_STOP_MDAQ
{
	ULONG DevNumber;
	ULONG ChanID;
	ULONG Result;
}IOCTL_DEV_START_STOP_MDAQ, *PIOCTL_DEV_START_STOP_MDAQ;

//  [6/13/2012 dan.yang]
typedef struct _IOCTL_DEV_MDAQ_STATUS
{
	ULONG DevNumber;
	ULONG ChanID;
	ULONG CurrentCnt;
	ULONG Status;
	ULONG Result;
}IOCTL_DEV_MDAQ_STATUS, *PIOCTL_DEV_MDAQ_STATUS;

//  [6/13/2012 dan.yang]
typedef struct _IOCTL_DEV_MDAQ_DATA
{
	ULONG DevNumber;
	ULONG ChanID;
	ULONG StartIndex;
	ULONG MaxCount;
	ULONG Result;
	ULONG Data[128];//YDD 2014.11.27
}IOCTL_DEV_MDAQ_DATA, *PIOCTL_DEV_MDAQ_DATA;

//  [9/29/2012 dan.yang]
typedef struct _IOCTL_DEV_MAILBOX
{
	ULONG DevNumber;
	ULONG Par_ID;
	ULONG object_id;
	ULONG data_index;
	ULONG DataCount;
	ULONG DataBuffer[128];//YDD 2014.11.27
	ULONG Result;
}IOCTL_DEV_MAILBOX, *PIOCTL_DEV_MAILBOX;

//********************SCARA ROBOT**************************/
typedef struct _IOCTL_ROBOT_SET_MODE
{
	ULONG  DevNumber;
	//HAND   GpSysHandle; //provided by kernal
	U64 GpSysHandle;
	ULONG  PosArray[MAX_AXIS_NUM_PER_GP];
	USHORT Mode;
	ULONG  Result;
}IOCTL_ROBOT_SET_MODE, *PIOCTL_ROBOT_SET_MODE;

typedef struct _IOCTL_ROBOT_OPEN//zhaocui add
{
	ULONG  DevNumber;
	//HAND   GpSysHandle; //provided by kernal
	U64 GpSysHandle;
	ULONG  Result;
}IOCTL_ROBOT_OPEN, *PIOCTL_ROBOT_OPEN;

typedef struct _IOCTL_ROBOT_CLOSE
{
	ULONG  DevNumber;
	//HAND   GpSysHandle; //provided by kernal
	U64 GpSysHandle;
	ULONG  Result;
}IOCTL_ROBOT_CLOSE, *PIOCTL_ROBOT_CLOSE;

typedef struct _IOCTL_ROBOT_REL
{
	ULONG  DevNumber;
	//HAND  GpSysHandle; //provided by kernal
	U64 GpSysHandle;
	ULONG  ulPPU;
	ULONG  RateReg[MAX_AXIS_NUM_PER_GP];
	LONG   PulseReg[MAX_AXIS_NUM_PER_GP];
	ULONG  ipo_map[MAX_AXIS_NUM_PER_GP];//[Add for pci1245 and pci1265.Dan.yang 20110418]
	LONG   ipo_length; //[Add for pci1245 and pci1265.Dan.yang 20110418]
	ULONG  VelLReg;
	ULONG  VelHReg;
	ULONG  AccReg;
	ULONG  DecReg;
	ULONG  AkReg;
	ULONG  AlReg;   
	USHORT MotType; 
    USHORT GpAxCnt;  //[Add for pci1245 and pci1265.Dan.yang 2011.04.18]
	ULONG  DPReg;
	ULONG  Result;	
	
} IOCTL_ROBOT_REL, IOCTL_ROBOT_ABS,*PIOCTL_ROBOT_REL,*PIOCTL_ROBOT_ABS;

//*********************************************************/
#endif // __IO_CONTROL_H__
