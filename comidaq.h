// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CComiDaq wrapper class

class CComiDaq : public CWnd
{
protected:
    DECLARE_DYNCREATE(CComiDaq)
public:
    CLSID const& GetClsid()
    {
        static CLSID const clsid
            = { 0xd638fbdd, 0x9afd, 0x4c6d, { 0xb7, 0x9, 0x32, 0x46, 0x17, 0x9b, 0xb1, 0x16 } };
        return clsid;
    }
    virtual BOOL Create(LPCTSTR lpszClassName,
        LPCTSTR lpszWindowName, DWORD dwStyle,
        const RECT& rect,
        CWnd* pParentWnd, UINT nID,
        CCreateContext* pContext = NULL)
    {
        return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID);
    }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
        const RECT& rect, CWnd* pParentWnd, UINT nID,
        CFile* pPersist = NULL, BOOL bStorage = FALSE,
        BSTR bstrLicKey = NULL)
    {
        return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
            pPersist, bStorage, bstrLicKey);
    }

    // Attributes
public:
    long GetDeviceId();
    void SetDeviceId(long);
    long GetDevInstance();
    void SetDevInstance(long);
    BOOL GetEnableErrorMsgDlg();
    void SetEnableErrorMsgDlg(BOOL);
    long GetDlogLevel();
    void SetDlogLevel(long);
    CString GetDlogFile();
    void SetDlogFile(LPCTSTR);

    // Operations
public:
    short GnDeviceLoad();
    short GnDeviceUnload();
    short AiSetInputType(long InputMode);
    short AiSetRange(long Channel, double vmin, double vmax);
    short AiGetRangeVolt(long Channel, double* vmin, double* vmax);
    short AiGetRangeDigit(long Channel, long* Dmin, long* Dmax);
    long AiGetDigit(long Channel);
    double AiGetVolt(long Channel);
    long AiScanStart(long NumChannel, long* ChanList, long ScanFreq, long BufSize, long TrsMethod, long IsPauseAtFull);
    short AiScanStop(long IsReleaseBuf);
    short AiScanSetTrgEvent(long InputSource, long EdgeType, long TrgMode, double AiRef, double AiRefBand);
    long AiScanCurCount();
    long AiScanChangeFreq(long ScanFreq);
    short AiScanReleaseBuf();
    short AiScanResume();
    double AiScanRetrOne(long ChannelOrder, long ScanCount);
    long AiScanRetrChannelI2(long ChannelOrder, long StartCount, long MaxNumData, short* DestBuf);
    long AiScanRetrChannelF4(long ChannelOrder, long StartCount, long MaxNumData, float* DestBuf);
    long AiScanRetrChannelF8(long ChannelOrder, long StartCount, long MaxNumData, double* DestBuf);
    long AiScanRetrBlockI2(long StartCount, long MaxNumData, short* DestBuf);
    long AiScanRetrBlockF4(long StartCount, long MaxNumData, float* DestBuf);
    long AiScanRetrBlockF8(long StartCount, long MaxNumData, double* DestBuf);
    short AoOut(long Channel, double OutVolt);
    long AoWfmStart(long Channel, double* DataBuffer, long NumData, long PPS, long MaxLoops);
    short AoWfmStop(long Channel);
    long AoWfmGetCurLoops(long Channel);
    long AoWfmGetCurPos(long Channel);
    long AoWfmRateChange(long Channel, long PPS);
    short DioSetUsage(long Usage);
    long DioGetUsage();
    long DiGetOne(long Channel);
    long DiGetAll();
    long DiGetAllEx(long GroupIdx);
    long DoGetOne(long Channel);
    long DoGetAll();
    long DoGetAllEx(long GroupIdx);
    short DoPutOne(long Channel, long OutState);
    short DoPutAll(long OutStates);
    short DoPutAllEx(long GroupIdx, long OutStates);
    short SdioInitComm();
    short SdioCheckModule(long ModuleNo);
    short SdioSetDioUsage(long ModuleNo, long Usage);
    long SdioReadLowByte(long ModuleNo);
    long SdioReadHighByte(long ModuleNo);
    long SdioReadWord(long ModuleNo);
    short SdioWriteLowByte(long ModuleNo, long Value8);
    short SdioWriteHighByte(long ModuleNo, long Value8);
    short SdioWriteWord(long ModuleNo, long Value16);
    short Cnt16Setup(long Channel, long RwMode, long OpMode, long BcdBin, long LoadValue);
    short Cnt16LoadCount(long Channel, long LoadValue);
    long Cnt16ReadCount(long Channel);
    long Cnt32ReadCount(long Channel);
    short Cnt32ClearCount(long Channel);
    short EncConfig(long Channel, long Mode, long IsResetByZ);
    short EncReset(long Channel);
    short EncLoad(long Channel, long Count);
    long EncRead(long Channel);
    short EncResetZ(long Channel);
    short EncLoadZ(long Channel, long Count);
    long EncReadZ(long Channel);
    double PgStart(long Channel, double Freq, long NumPulses);
    double PgChangeFreq(long Channel, double Freq);
    short PgIsActive(long Channel);
    short PgStop(long Channel);
    short FcSetCounter(long Channel, long Mode, long ClkSource);
    long FcReadNowCount(long Channel);
    long FcReadOldCount(long Channel);
    long FcGetGateState(long Channel);
    double FcGetClkFreq(long ClkSourceIdx);
    short FcClear(long Channel);
    short FcClearMulti(long CntrSel);
    long GnGetErrorCode();
    CString GnGetErrorString(long ErrorCode);
    long GnBitShift(long Value, long ShiftOption);
    short DlogSetup(long Level, LPCTSTR szLogFile);
    short DlogSetSkipThis();
    short DlogAddComment(LPCTSTR szComment);
    short GnShowLastError();
    short AiScanIsBufFull();
    short DiEventSetup(long ChannelMask1, long ChannelMask2);
    short GnDeviceIsLoaded();
};
