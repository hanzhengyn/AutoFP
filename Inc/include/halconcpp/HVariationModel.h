/***********************************************************
 * File generated by the HALCON-Compiler hcomp version 11.0
 * Usage: Interface to C++
 *
 * Software by: MVTec Software GmbH, www.mvtec.com
 ***********************************************************/


#ifndef HCPP_HVARIATIONMODEL
#define HCPP_HVARIATIONMODEL

namespace HalconCpp
{

// Represents an instance of a variation model.
class LIntExport HVariationModel : public HToolBase
{

public:

  // Create an uninitialized instance
  HVariationModel():HToolBase() {}

  // Copy constructor
  HVariationModel(const HVariationModel& source) : HToolBase(source) {}

  // Create HVariationModel from handle, taking ownership
  explicit HVariationModel(Hlong handle);

  // Set new handle, taking ownership
  void SetHandle(Hlong handle);

  // Deep copy of all data represented by this object instance
  HVariationModel Clone() const;



/*****************************************************************************
 * Operator-based class constructors
 *****************************************************************************/

  // read_variation_model: Read a variation model from a file.
  explicit HVariationModel(const HString& FileName);

  // read_variation_model: Read a variation model from a file.
  explicit HVariationModel(const char* FileName);

  // create_variation_model: Create a variation model for image comparison.
  explicit HVariationModel(Hlong Width, Hlong Height, const HString& Type, const HString& Mode);

  // create_variation_model: Create a variation model for image comparison.
  explicit HVariationModel(Hlong Width, Hlong Height, const char* Type, const char* Mode);




  /***************************************************************************
   * Operators                                                               *
   ***************************************************************************/

  // Deserialize a variation model.
  void DeserializeVariationModel(const HSerializedItem& SerializedItemHandle);

  // Serialize a variation model.
  HSerializedItem SerializeVariationModel() const;

  // Read a variation model from a file.
  void ReadVariationModel(const HString& FileName);

  // Read a variation model from a file.
  void ReadVariationModel(const char* FileName);

  // Write a variation model to a file.
  void WriteVariationModel(const HString& FileName) const;

  // Write a variation model to a file.
  void WriteVariationModel(const char* FileName) const;

  // Return the threshold images used for image comparison by a variation model.
  HImage GetThreshImagesVariationModel(HImage* MaxImage) const;

  // Return the images used for image comparison by a variation model.
  HImage GetVariationModel(HImage* VarImage) const;

  // Compare an image to a variation model.
  HRegion CompareExtVariationModel(const HImage& Image, const HString& Mode) const;

  // Compare an image to a variation model.
  HRegion CompareExtVariationModel(const HImage& Image, const char* Mode) const;

  // Compare an image to a variation model.
  HRegion CompareVariationModel(const HImage& Image) const;

  // Prepare a variation model for comparison with an image.
  void PrepareDirectVariationModel(const HImage& RefImage, const HImage& VarImage, const HTuple& AbsThreshold, const HTuple& VarThreshold) const;

  // Prepare a variation model for comparison with an image.
  void PrepareDirectVariationModel(const HImage& RefImage, const HImage& VarImage, double AbsThreshold, double VarThreshold) const;

  // Prepare a variation model for comparison with an image.
  void PrepareVariationModel(const HTuple& AbsThreshold, const HTuple& VarThreshold) const;

  // Prepare a variation model for comparison with an image.
  void PrepareVariationModel(double AbsThreshold, double VarThreshold) const;

  // Train a variation model.
  void TrainVariationModel(const HImage& Images) const;

  // Free the memory of the training data of a variation model.
  void ClearTrainDataVariationModel() const;

  // Create a variation model for image comparison.
  void CreateVariationModel(Hlong Width, Hlong Height, const HString& Type, const HString& Mode);

  // Create a variation model for image comparison.
  void CreateVariationModel(Hlong Width, Hlong Height, const char* Type, const char* Mode);

};

class LIntExport HVariationModelArray : public HToolArray
{
public:
  HVariationModelArray();
  HVariationModelArray(HVariationModel* classes, Hlong length);
protected:
  virtual void CreateArray(Hlong length);
};

}

#endif
