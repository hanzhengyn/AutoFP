/***********************************************************
 * File generated by the HALCON-Compiler hcomp version 11.0
 * Usage: Interface to C++
 *
 * Software by: MVTec Software GmbH, www.mvtec.com
 ***********************************************************/


#ifndef HCPP_HMETROLOGYMODEL
#define HCPP_HMETROLOGYMODEL

namespace HalconCpp
{

// Represents an instance of a metrology model.
class LIntExport HMetrologyModel : public HToolBase
{

public:

  // Copy constructor
  HMetrologyModel(const HMetrologyModel& source) : HToolBase(source) {}

  // Create HMetrologyModel from handle, taking ownership
  explicit HMetrologyModel(Hlong handle);

  // Set new handle, taking ownership
  void SetHandle(Hlong handle);

  // Deep copy of all data represented by this object instance
  HMetrologyModel Clone() const;



/*****************************************************************************
 * Operator-based class constructors
 *****************************************************************************/

  // read_metrology_model: Read a metrology model from a file.
  explicit HMetrologyModel(const HString& FileName);

  // read_metrology_model: Read a metrology model from a file.
  explicit HMetrologyModel(const char* FileName);

  // create_metrology_model: Create the data structure that is needed to measure geometric shapes.
  explicit HMetrologyModel();




  /***************************************************************************
   * Operators                                                               *
   ***************************************************************************/

  // Deserialize a serialized metrology model.
  void DeserializeMetrologyModel(const HSerializedItem& SerializedItemHandle);

  // Serialize a metrology model.
  HSerializedItem SerializeMetrologyModel() const;

  // Transform of metrology objects of a metrology model, e.g. for alignment.
  void TransformMetrologyObject(const HTuple& Indices, const HTuple& Row, const HTuple& Column, const HTuple& Phi, const HTuple& Mode) const;

  // Transform of metrology objects of a metrology model, e.g. for alignment.
  void TransformMetrologyObject(const HString& Indices, double Row, double Column, double Phi, const HString& Mode) const;

  // Transform of metrology objects of a metrology model, e.g. for alignment.
  void TransformMetrologyObject(const char* Indices, double Row, double Column, double Phi, const char* Mode) const;

  // Write a metrology model to a file.
  void WriteMetrologyModel(const HString& FileName) const;

  // Write a metrology model to a file.
  void WriteMetrologyModel(const char* FileName) const;

  // Read a metrology model from a file.
  void ReadMetrologyModel(const HString& FileName);

  // Read a metrology model from a file.
  void ReadMetrologyModel(const char* FileName);

  // Copy a metrology model.
  Hlong CopyMetrologyModel(const HTuple& Indices) const;

  // Copy a metrology model.
  Hlong CopyMetrologyModel(const HString& Indices) const;

  // Copy a metrology model.
  Hlong CopyMetrologyModel(const char* Indices) const;

  // Copy metrology metrology objects of a metrology model.
  HTuple CopyMetrologyObject(const HTuple& Indices) const;

  // Copy metrology metrology objects of a metrology model.
  Hlong CopyMetrologyObject(const HString& Indices) const;

  // Copy metrology metrology objects of a metrology model.
  Hlong CopyMetrologyObject(const char* Indices) const;

  // Get the number of instances of the metrology objects of a metrology model.
  HTuple GetMetrologyObjectNumInstances(const HTuple& Indices) const;

  // Get the number of instances of the metrology objects of a metrology model.
  double GetMetrologyObjectNumInstances(Hlong Indices) const;

  // Get the results of the measurements applied for a metrology model.
  HTuple GetMetrologyObjectResult(const HTuple& Indices, const HTuple& Instance, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Get the results of the measurements applied for a metrology model.
  HTuple GetMetrologyObjectResult(Hlong Indices, Hlong Instance, const HString& GenParamName, const HString& GenParamValue) const;

  // Get the results of the measurements applied for a metrology model.
  HTuple GetMetrologyObjectResult(Hlong Indices, Hlong Instance, const char* GenParamName, const char* GenParamValue) const;

  // Get the measure regions and the results of the edge location for the metrology objects of a metrology model.
  HXLDCont GetMetrologyObjectMeasures(const HTuple& Indices, const HString& Transition, HTuple* Row, HTuple* Column) const;

  // Get the measure regions and the results of the edge location for the metrology objects of a metrology model.
  HXLDCont GetMetrologyObjectMeasures(const HString& Indices, const HString& Transition, HTuple* Row, HTuple* Column) const;

  // Get the measure regions and the results of the edge location for the metrology objects of a metrology model.
  HXLDCont GetMetrologyObjectMeasures(const char* Indices, const char* Transition, HTuple* Row, HTuple* Column) const;

  // Measure and fit the geometric shapes of all metrology objects of a metrology model.
  void ApplyMetrologyModel(const HImage& Image) const;

  // Get the indices of the metrology objects of a metrology model.
  HTuple GetMetrologyObjectIndices() const;

  // Reset all fuzzy parameters and fuzzy functions of a metrology model.
  void ResetMetrologyObjectFuzzyParam(const HTuple& Indices) const;

  // Reset all fuzzy parameters and fuzzy functions of a metrology model.
  void ResetMetrologyObjectFuzzyParam(const HString& Indices) const;

  // Reset all fuzzy parameters and fuzzy functions of a metrology model.
  void ResetMetrologyObjectFuzzyParam(const char* Indices) const;

  // Reset all parameters of a metrology model.
  void ResetMetrologyObjectParam(const HTuple& Indices) const;

  // Reset all parameters of a metrology model.
  void ResetMetrologyObjectParam(const HString& Indices) const;

  // Reset all parameters of a metrology model.
  void ResetMetrologyObjectParam(const char* Indices) const;

  // Get a fuzzy parameter of a metroloy model.
  HTuple GetMetrologyObjectFuzzyParam(const HTuple& Indices, const HTuple& GenParamName) const;

  // Get a fuzzy parameter of a metroloy model.
  double GetMetrologyObjectFuzzyParam(const HString& Indices, const HString& GenParamName) const;

  // Get a fuzzy parameter of a metroloy model.
  double GetMetrologyObjectFuzzyParam(const char* Indices, const char* GenParamName) const;

  // Get one or several parameters of a metroloy model.
  HTuple GetMetrologyObjectParam(const HTuple& Indices, const HTuple& GenParamName) const;

  // Get one or several parameters of a metroloy model.
  HTuple GetMetrologyObjectParam(const HString& Indices, const HString& GenParamName) const;

  // Get one or several parameters of a metroloy model.
  HTuple GetMetrologyObjectParam(const char* Indices, const char* GenParamName) const;

  // Set fuzzy parameters or fuzzy functions for a metrology model.
  void SetMetrologyObjectFuzzyParam(const HTuple& Indices, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Set fuzzy parameters or fuzzy functions for a metrology model.
  void SetMetrologyObjectFuzzyParam(const HString& Indices, const HString& GenParamName, double GenParamValue) const;

  // Set fuzzy parameters or fuzzy functions for a metrology model.
  void SetMetrologyObjectFuzzyParam(const char* Indices, const char* GenParamName, double GenParamValue) const;

  // Set parameters for the metrology objects of a metrology model.
  void SetMetrologyObjectParam(const HTuple& Indices, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Set parameters for the metrology objects of a metrology model.
  void SetMetrologyObjectParam(const HString& Indices, const HString& GenParamName, const HString& GenParamValue) const;

  // Set parameters for the metrology objects of a metrology model.
  void SetMetrologyObjectParam(const char* Indices, const char* GenParamName, const char* GenParamValue) const;

  // Add a rectangle to a metrology model.
  Hlong AddMetrologyObjectRectangle2Measure(const HTuple& Row, const HTuple& Column, const HTuple& Phi, const HTuple& Length1, const HTuple& Length2, const HTuple& MeasureLength1, const HTuple& MeasureLength2, const HTuple& MeasureSigma, const HTuple& MeasureThreshold, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Add a rectangle to a metrology model.
  Hlong AddMetrologyObjectRectangle2Measure(double Row, double Column, double Phi, double Length1, double Length2, double MeasureLength1, double MeasureLength2, double MeasureSigma, double MeasureThreshold, const HString& GenParamName, double GenParamValue) const;

  // Add a rectangle to a metrology model.
  Hlong AddMetrologyObjectRectangle2Measure(double Row, double Column, double Phi, double Length1, double Length2, double MeasureLength1, double MeasureLength2, double MeasureSigma, double MeasureThreshold, const char* GenParamName, double GenParamValue) const;

  // Add a line to a metrology model.
  Hlong AddMetrologyObjectLineMeasure(const HTuple& RowBegin, const HTuple& ColumnBegin, const HTuple& RowEnd, const HTuple& ColumnEnd, const HTuple& MeasureLength1, const HTuple& MeasureLength2, const HTuple& MeasureSigma, const HTuple& MeasureThreshold, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Add a line to a metrology model.
  Hlong AddMetrologyObjectLineMeasure(double RowBegin, double ColumnBegin, double RowEnd, double ColumnEnd, double MeasureLength1, double MeasureLength2, double MeasureSigma, double MeasureThreshold, const HString& GenParamName, double GenParamValue) const;

  // Add a line to a metrology model.
  Hlong AddMetrologyObjectLineMeasure(double RowBegin, double ColumnBegin, double RowEnd, double ColumnEnd, double MeasureLength1, double MeasureLength2, double MeasureSigma, double MeasureThreshold, const char* GenParamName, double GenParamValue) const;

  // Add an ellipse or an elliptic arc to a metrology model.
  Hlong AddMetrologyObjectEllipseMeasure(const HTuple& Row, const HTuple& Column, const HTuple& Phi, const HTuple& Radius1, const HTuple& Radius2, const HTuple& MeasureLength1, const HTuple& MeasureLength2, const HTuple& MeasureSigma, const HTuple& MeasureThreshold, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Add an ellipse or an elliptic arc to a metrology model.
  Hlong AddMetrologyObjectEllipseMeasure(double Row, double Column, double Phi, double Radius1, double Radius2, double MeasureLength1, double MeasureLength2, double MeasureSigma, double MeasureThreshold, const HString& GenParamName, double GenParamValue) const;

  // Add an ellipse or an elliptic arc to a metrology model.
  Hlong AddMetrologyObjectEllipseMeasure(double Row, double Column, double Phi, double Radius1, double Radius2, double MeasureLength1, double MeasureLength2, double MeasureSigma, double MeasureThreshold, const char* GenParamName, double GenParamValue) const;

  // Add a circle or a circular arc to a metrology model.
  Hlong AddMetrologyObjectCircleMeasure(const HTuple& Row, const HTuple& Column, const HTuple& Radius, const HTuple& MeasureLength1, const HTuple& MeasureLength2, const HTuple& MeasureSigma, const HTuple& MeasureThreshold, const HTuple& GenParamName, const HTuple& GenParamValue) const;

  // Add a circle or a circular arc to a metrology model.
  Hlong AddMetrologyObjectCircleMeasure(double Row, double Column, double Radius, double MeasureLength1, double MeasureLength2, double MeasureSigma, double MeasureThreshold, const HString& GenParamName, double GenParamValue) const;

  // Add a circle or a circular arc to a metrology model.
  Hlong AddMetrologyObjectCircleMeasure(double Row, double Column, double Radius, double MeasureLength1, double MeasureLength2, double MeasureSigma, double MeasureThreshold, const char* GenParamName, double GenParamValue) const;

  // Delete all metrology models and free the allocated memory.
  static void ClearAllMetrologyModels();

  // Delete metrology objects and free the allocated memory.
  void ClearMetrologyObject(const HTuple& Indices) const;

  // Delete metrology objects and free the allocated memory.
  void ClearMetrologyObject(const HString& Indices) const;

  // Delete metrology objects and free the allocated memory.
  void ClearMetrologyObject(const char* Indices) const;

  // Set the size of the image of metrology objects.
  void SetMetrologyModelImageSize(Hlong Width, Hlong Height) const;

  // Create the data structure that is needed to measure geometric shapes.
  void CreateMetrologyModel();

};

class LIntExport HMetrologyModelArray : public HToolArray
{
public:
  HMetrologyModelArray();
  HMetrologyModelArray(HMetrologyModel* classes, Hlong length);
protected:
  virtual void CreateArray(Hlong length);
};

}

#endif
