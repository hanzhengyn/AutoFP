/***********************************************************
 * File generated by the HALCON-Compiler hcomp version 11.0
 * Usage: Interface to C++
 *
 * Software by: MVTec Software GmbH, www.mvtec.com
 ***********************************************************/


#ifndef HCPP_HSURFACEMATCHINGRESULT
#define HCPP_HSURFACEMATCHINGRESULT

namespace HalconCpp
{

// Represents an instance of a surface matching result.
class LIntExport HSurfaceMatchingResult : public HToolBase
{

public:

  // Create an uninitialized instance
  HSurfaceMatchingResult():HToolBase() {}

  // Copy constructor
  HSurfaceMatchingResult(const HSurfaceMatchingResult& source) : HToolBase(source) {}

  // Create HSurfaceMatchingResult from handle, taking ownership
  explicit HSurfaceMatchingResult(Hlong handle);

  // Set new handle, taking ownership
  void SetHandle(Hlong handle);




  /***************************************************************************
   * Operators                                                               *
   ***************************************************************************/

  // Get details of a result from surface based matching.
  HTuple GetSurfaceMatchingResult(const HTuple& ResultName, Hlong ResultIndex) const;

  // Get details of a result from surface based matching.
  HTuple GetSurfaceMatchingResult(const HString& ResultName, Hlong ResultIndex) const;

  // Get details of a result from surface based matching.
  HTuple GetSurfaceMatchingResult(const char* ResultName, Hlong ResultIndex) const;

  // Free the memory of all surface matching results.
  static void ClearAllSurfaceMatchingResults();

  // Refine the pose of a surface model in a 3D scene.
  static HPoseArray RefineSurfaceModelPose(const HSurfaceModel& SurfaceModelID, const HObjectModel3D& ObjectModel3D, const HPoseArray& InitialPose, const HTuple& MinScore, const HString& ReturnResultHandle, const HTuple& GenParamName, const HTuple& GenParamValue, HTuple* Score, HSurfaceMatchingResultArray* SurfaceMatchingResultID);

  // Refine the pose of a surface model in a 3D scene.
  HPose RefineSurfaceModelPose(const HSurfaceModel& SurfaceModelID, const HObjectModel3D& ObjectModel3D, const HPose& InitialPose, double MinScore, const HString& ReturnResultHandle, const HString& GenParamName, const HString& GenParamValue, HTuple* Score);

  // Refine the pose of a surface model in a 3D scene.
  HPose RefineSurfaceModelPose(const HSurfaceModel& SurfaceModelID, const HObjectModel3D& ObjectModel3D, const HPose& InitialPose, double MinScore, const char* ReturnResultHandle, const char* GenParamName, const char* GenParamValue, HTuple* Score);

  // Find the best matches of a surface model in a 3D scene.
  static HPoseArray FindSurfaceModel(const HSurfaceModel& SurfaceModelID, const HObjectModel3D& ObjectModel3D, double RelSamplingDistance, double KeyPointFraction, const HTuple& MinScore, const HString& ReturnResultHandle, const HTuple& GenParamName, const HTuple& GenParamValue, HTuple* Score, HSurfaceMatchingResultArray* SurfaceMatchingResultID);

  // Find the best matches of a surface model in a 3D scene.
  HPose FindSurfaceModel(const HSurfaceModel& SurfaceModelID, const HObjectModel3D& ObjectModel3D, double RelSamplingDistance, double KeyPointFraction, double MinScore, const HString& ReturnResultHandle, const HString& GenParamName, const HString& GenParamValue, HTuple* Score);

  // Find the best matches of a surface model in a 3D scene.
  HPose FindSurfaceModel(const HSurfaceModel& SurfaceModelID, const HObjectModel3D& ObjectModel3D, double RelSamplingDistance, double KeyPointFraction, double MinScore, const char* ReturnResultHandle, const char* GenParamName, const char* GenParamValue, HTuple* Score);

};

class LIntExport HSurfaceMatchingResultArray : public HToolArray
{
public:
  HSurfaceMatchingResultArray();
  HSurfaceMatchingResultArray(HSurfaceMatchingResult* classes, Hlong length);
protected:
  virtual void CreateArray(Hlong length);
};

}

#endif
